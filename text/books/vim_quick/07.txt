Chapter 7


Personalizing Vim
If you’ve had any experience with some of the text editors for programmers, it’s most likely
you’ll be disappointed with how Vim looks. But this is actually a good thing. While other editors
try to force you use their features, Vim does the opposite.
The “interface” is very minimal. This means that you have to spend some time and effort to
make the Vim interface look pretty, as well as to improve your productivity. 
The benefit is this process of configuration will help you understand better how Vim works.

Vim configuration explained
As a first step, we have to understand how to configure Vim. There are multiple configuration
files, which can reside on different locations in your system, depending on which operating
system you use or where have you installed Vim.
The main configuration file is vimrc . It exists in two versions—global and personal. Your personal
vimrc file is usually placed in your home directory. In Linux operating systems it’s usually a
hidden file called .vimrc .
Whatever you change in this file will overrule any previous settings in the global vimrc file. If
you’re not sure of your home directory location, run this command in Vim: :echo $HOME .
The permanent configuration is set through .vimrc . But you can also configure the current Vim
session. For example, if you’ve started Vim, and you don't have line numbers shown, you can
run the command:
:set number
to enable line numbers for the current session. If you’d like to disable this option for the current
:set nonumber
Another way to enable/disable boolean options is to use exclamation point ! . In this case, we
could enable line numbers (assuming they’re disabled) with a command:
:set number!


Make Vim look beautiful
Vim allows its users to change the colors it uses. So yes, Vim supports color schemes. To begin,
choose some of the installed color schemes. Later you can create your own, or download some
you like, and install them in Vim.
In order to choose your color scheme, open a file with some source code. Then type: :colorscheme
and press Tab. Then press Enter. You’ll see what the scheme looks like. Repeat the same
command, just press Tab more times, until you find the color scheme you like. Once you find it,
add to your .vimrc file:
color scheme scheme_name
Sometimes, in a big file with lots of code and syntax coloring, it can be difficult to track your
cursor. That’s why it’s a good tip to mark the line the cursor is currently in. You can try this out
by typing :set cursor line in Vim, or to make this permanent, add to your .vimrc file:


set cursor line 
If you don't like the styling of the line, you can change it like this, for example: 
:highlight Cursor Line guibg=lightblue ctermbg=lightgrey 



If you really have a problem in following your cursor, then you can use a command to mark the
current column of the cursor, coloring the entire column: set cursorcolumn .
Of course, it’s really important to add the line numbers, so also put: set nu[mber] to your .vimrc
file.
If you want to enable spell checking for default, English language, you should add this: set spell .
If you want spell checking enabled for some other language, you can do it this way (example for
German language): set spelllang=de . If you want spell checking for more languages at once, no
problem: set spelllang=en,de,it . Of course, if you change spelllang setting to a language that’s
not installed, Vim will ask you if it should try to download it.
You can always check the configuration of any Vim setting by adding a ? to the end of its name.
For example:

set spell?
nospell


Usability improvements
Default Vim settings are not really great. If you’re going to use Vim seriously, then it’s definitely
worth it to spend some time on configuration. As we already said, all the configuration we’ll
manage through the .vimrc file.
In this part, I will give you a list of different Vim settings, which you should consider and try
out. At the end of this chapter, you’ll also find a snippet of basic recommended options, which
you can just copy to your .vimrc file. Later on, you can continue with configuration on your own.

set nocompatible - Use Vim settings, rather then Vi settings. It’s important to have this on
the top of your file, as it influences other options.
•

