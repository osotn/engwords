Computer principles and design in Verilog HDL
---------------------------------------------
Yamin Li

1
Computer fundamentals and performance evaluation
------------------------------------------------

Single Chip computer is IC (integrated circuit):
    -   CPU (or microprocessor);
    -   small amound of memory;
    -   I/O interface controllers

Computer consists of:
    -   software;
    -   I/O devices;
    -   power supply.

Software is collection of:
    -   programs;
    -   related data.

A program provides the instructions for telling a computer what to do and how to do it.
The instructions are represented in binary format that a computer can understand.
An executable program is usually generated by a compiler, based on the source
codes of the program which are prepared by programmers.
Programmers develop source codes in a high-level programming language, C for instance,
with a text editor.
A debugger is often used by programmers to debug the program.
Compiler, editor, debugger, and other libraries are also programs, sometimes we
call them utilities. All programs other than the system software and utilities are
called applications.

I/O devices, also known as peripheral devices.

Inside CPU:
    -   ALUs;
    -   FPU;
    -   register files;
    -   control unit;


1.1.3 Instruction Set architecture (ISA)
----------------------------------------
Instaction:
    -   operation code (opcode) which defines what will be done.
    -   source operands
    -   storing for result

Sourse operands:
    -   immediate (data word) = constant
    -   variable = register or memory

c += a;      // addl %ecx, %ebx - add long (32bit) %ebx = %ebx + %ecx


MIPS is RISC = ARM
x86  is CISC = complex instruction set



1.2
---
The job of a CPU is to execute instructions.
The instruction is fetched from the instruction memory.
The content of PC (program counter) is used as the address of the instruction memory.
ALU is responsible for calculation.

Pipelined CPU divides the execution of an instruction into several stages and allows
overlapping execution of multiple instructions.

Pipelined CPU tries to produce a result on every clock cycle.

Superscalar CPU tries to produce multiple results on every cycle by means of fetching
and executing multiple instructions in a clock cycle ~ 1.2 (only 20%)

Multithreading CPUs try to execute multiple threads in parellel.
Each thread has a dedicated program counter and register file, but the instuction cache,
data cache, and functional units are shared by all the threads. 
It is TLP = Thread level parallelism.

A multicore CPU is an IC chip in which multiple ordinay CPUs (cores) are fabricated.
An ordinary CPU may be a pipelined CPU, a superscalar CPU, or a multithreading CPU.
In multicore CPU, each core has a dedicated level 1 (L1) instruction cache and data cache.
All the cores may share a level 2 (L2) cache, or each core has dedicated L2 cache.


Memory is a space in which the programs that are executing currently are stored
temporarily. A program consists of instructions and data.
There are three level of caches (L1, L2, and L3).
L1 consists of separated instruction cache and data cache, but L2 on-chip cache is
shared by instructions and data.

The virtual memory provides a large virtual address space for running programs to exist in.
The virtual addresses cannot be used to access the main memory directly because
multiple programs are allowed to be executed simultaneously.
The virtual addresses must be mapped to physical memory locations.
In a paging management mechanism, the virtual address space is divided into pages -
block of contiguous virtual memory addresses.
Thus, a virtual address consists of a virtual page number and an offset within a page.
Only the virtual page number is needed to be mapped to a physical page number.
The OS maintains a page table describing the mapping from virtual to physical pages
for each process. In modern CPUs, the TLBs are fabricated for speeding up the mapping.
The organization of the TLB is very similar to that of the cache.
The TLB stores copies of the most frequently used page table entries.

            I(instructions) x CPI (execute 1 instr)
T(time) = --------------------------------------------
                            F (frequency)

F cannot get higher unlimitedly.
If F=20GHz,  c = 300 000 000 m/sec  -> 1 cm  (((())))((((())))


------

Trace driven simulation is method for estimation the performance of potential
computer architectures by simulating their behavior in response to the
instruction and data references contained in an input trace.
A real machine is used to execute a benchmark program and write the executed
instruction information, such as the instruction address, instruction opcode,
and data reference address, to a trace file.
This trace is then fed into an architecture simulator for the performance study,
such as cache performance, ILP, accuracy of branch prediction, TLB performance,
and the utilization of FUs.
We can find the performance bottleneck and change the architecture configurations
to eliminate the bottleneck.

Execution driven simulation is another method that does not require storing traces.
It requires the execution of the benchmark program: as the program is being
executed, the performance study is also carried out at the same time.

NUMA = nonuniform memory access
UMA  =    uniform memory access

SMP = symmetric multiprocessors


1.4
HDL
Hardware Description Languages
for the hardware design, just like C and Java are languages for software development.
The most popular HDLs are Verilog HDL and VHDL. Other high level HDLs include
SystemVerilog and SystemC.



2.
A Brief introduction to logic circuits and Verilog HDL
------------------------------------------------------
Logic circuit design is the foundation of computer design.

There are two types of logic circuits:
    -   combinational circuits;  Outs = func(Ins)
    -   sequential    circuits;  Outs = func(Ins, Ins_Z^1, Ins_Z^2, ...)

Sequential circuit is used to construct a finite state machine; it need flip plops
to record the current state.

Logic circuits consist of inputs, logic gates, and outputs.
Gages: AND, OR, NOT.

The general steps of designing a combinational circuit are as follows:
    - write the truth table for each output;
    - use the Karnaugh map to get a simplified expression for each output;
    - design the circuit based on these expressions;
    - verify the correctness of the circuit through logic simulation

p.22
2.2




