Numbers
=======

Most people would say that numbers are the foundation of mathematics. This is quite a
modern view, because for most of the past two thousand years, students began with geometry. On the other hand, numbers are certainly the foundation of computers, and a thorough
understanding of numbers and how they work is vital to programming.
In this respect, then, the journey begins with a look at the way computers represent numbers
and what you can do with numbers using a computer. The goal here is to think about what a
number is, especially the distinction between the number and the way you can represent
it in writing or electronically.

Numbers as Written
------------------
Numbers were not discovered in one fell swoop. The set of numbers commonly recognized
today (positive counting numbers, negative counting numbers, zero, integers, rational numbers, irrational numbers, and imaginary numbers) required thousands of years to be discovered. While not reviewing the history of their discovery, a few points concerning their
general definitions are worthwhile.

Integers, Rationals, and Irrationals
------------------------------------
Mathematicians divide the world of numbers into several subsets. The first numbers to be
recognized were the counting numbers, or natural numbers, which are represented by the
symbol N . These are the numbers that children usually learn (1, 2, 3, 4, . . .). In addition,
there is the number zero (0). Each of these can represent a distinct number of “things.”
When you add the negative numbers, you have the set of integers, represented by the symbol
Z . With the integers, however, a new domain opens out, for negative numbers are brought
into the picture.
What, then, is a negative number? You can think about negative numbers in terms of a
transaction. Consider a situation in which you have 5 marbles. You are playing with another
person, Anne, who has 4 marbles. When you give Anne 2 marbles, she gains 2 marbles, but
it is also the case that she is giving you −2 marbles. Either way, you add 2 marbles to one
side and subtract 2 from the other.
Given this beginning, you can extend activities to consider multiplication. Think about
negative numbers in terms of an operation of “the other way around.” Then you can see
why two negative numbers multiplied together give a positive number. You give Anne
2 marbles, which is “the other way round” to her giving you 2 marbles. Since she gave
you −2 marbles, if you do this −2 times, it’s the other way round from her doing it 2 times,
so it’s the other way round from −4, giving you +4.
If this sounds confusing, the confusion explains why it took centuries for people to accept
the idea of negative numbers. The problem was so difficult that fractions, the quotients
of two integers, were accepted sooner. First there were the fractions of 1, such as 1 2 , and
⁄
2
1
3 . These are in many cases the reciprocals of the natural numbers, as when becomes .
1
2
⁄
1
After the reciprocals, other simple fractions arose. These were fractions between 0 and 1,
such as 2 3 . Then came the vulgar fractions, fractions greater than 1, such as 5 4 . At the
end of the line, you have the complete set of rational numbers, symbolized by Q , which
includes both positive and negative fractions, as well as the integers. The integers are
included with the rational numbers, because they are viewed as a special kind of fraction
that has a denominator of 1.

Note
The quotient of two numbers is what you get when you divide one number by
another. When one integer is divided by another, the result is a fraction, where the
first (top) number is called the numerator and the second (bottom) the denominator. Sometimes, quotient means just the integer part of a division, but this will be
covered later on. Similarly, the terms sum, difference, and product refer to, respectively,
the result of adding, subtracting, and multiplying two numbers.


Irrational and Real Numbers
---------------------------
Beyond the rational numbers, you have the irrational numbers. Such numbers cannot be
expressed by the quotient of two integers. For a long time it was thought that such numbers did not exist, but Pythagoras proved that at least one number, the square root of 2, was
irrational. Since those days (roughly 550 B.C.E.), the field has expanded. Mathematicians
now acknowledge that there are fundamentally more irrational numbers than rational ones.
The rational and irrational numbers together form the set of real numbers, represented
by the symbol R . In addition, however, there are other kinds of numbers, such as the
complex numbers. These numbers include a multiple of the imaginary number i, which
represents the square root of –1. While these numbers are beyond the scope of this chapter,
they are dealt with in Chapter 18, which discusses quaternions.

Note
The square root of a number n, is represented mathematically by n . In a programming language, it is usually represented by a function, such as sqrt(n) . The square
root of a number n is a number m, such that m ¥ m = n. When you multiply a number
by itself in this way, the result is called the square of the number, denoted by n 2 , n^2 ,
or power(n, 2) . A square is a special case of a power or an exponent. As long as p is
positive, when you take a number n to the power p, written n p , or n^p , this means
to multiply the number n by itself p times. Because two negative numbers multiplied
together give a positive number, every positive number has two square roots, one
positive and one negative, while negative numbers have no real square root. (What
happens when p is negative will be dealt with later on.)

The Number as a String of Digits
--------------------------------
Numbers can be represented many different ways. Consider the number 5. You can represent it geometrically, as a pentagon, but you can also represent it as a set of 5 dots. You
can present it physically, as 5 beads on an abacus. Still another (and common) approach
is to use the symbol “5,” which is defined to mean what you want it to mean. Each of
these representations has its own advantage. For example, if you use beads, to perform
operations such as adding and subtracting, you simply count beads back and forth. On the
other hand, when you get to larger numbers involving many beads, using symbols has an
advantage.
As it is, it is not possible to have a unique symbol for each number. Instead, you use a
limited set symbols, combining them to represent a given number, no matter how big. You
do this by means of a base system. To create a base system, you choose a number b as a
base. Then to represent a number n in the base b, you employ a recursive algorithm. Here
is a pseudocode example of how this happens:

Decimal, Binary, and Hexadecimal
--------------------------------
There’s nothing special about using 10 as a base, but since computers use base 2, base 10
might not be the best choice to use as an example in the current context. Still, base 10 has
its virtues, one of which is that humans have 10 fingers to count with. Because 10 is a
multiple of 2 and of 5, it’s fairly easy to determine whether a number written in decimal
notation is divisible by these two numbers. This is an advantage. On the other hand (no
pun intended), it’s much harder to tell if it’s divisible by 4 or 7. However, there are some
fairly simple tests for divisibility by 3 or 9, and it’s also easy to divide a number written
in base 10 by 2 or 5.

What if you use some other base? Consider, for example, base 12. This base is familiar, in
part, because it has been extensively used for currency and measuring, resulting in the
familiar system of feet and inches. It makes it easy to divide numbers by 2, 3, 4, or 6.
Another is base 60, used in clocks, along with 12 hours. Still another is base 360, used in
measuring angles. However, if the last two are to be used properly, they require a lot of
individual symbols. The Babylonians used this base, but apparently responding to the
complexity of the undertaking, they subdivided its values using a base 10 system. Although
very logical, base 12 never caught on except in limited ways.

Base 2, or binary, on the other hand, turns out to be useful in many ways and has found
many advocates. In base 2, you represent numbers by powers of two. Using the base
positions discussed earlier, the number 11 in base 2 is written as 1011, or 1 ¥ 8 + 0 ¥ 4 +
1 ¥ 2 + 1 ¥ 1. As with base 10, as long as you work with integers, representing numbers
in base 2 can be done uniquely. Another feature of base 2 is that while you need far more
digits to represent any given number, you only need two symbols to do it. For example,
1 is 1, 3 is 11, and 5 is 101. As people learn in a computer architecture course, this way
of relating numbers allows you to speak of 1 as “on” and 0 as “off,” and this is the basic
(binary) language of digital circuits.
Base 2 requires two symbols, but another base common in computer operations requires
16. This is hexadecimal, which uses the standard decimal symbols 0–9, added to
six others, the letters A–F, which stand for 10–15. In hexadecimal, F1A represents
15 ¥ 256 + 1 ¥ 16 + 10 ¥ 1, or 3866. Converting between binary and hexadecimal
is quite simple, since each hexadecimal symbol can be translated directly into four binary
symbols: F1A translates to 1111 0001 1010.

How Computers Represent Numbers
-------------------------------
Given that the binary system is at the heart of how numbers are represented in a computer,
and this book is about mathematics for programming, it is beneficial to examine in
greater detail how a computer uses binary numbers.

Representing Integers
---------------------
Because binary can be conveniently represented by two symbols, 1 or 0, or on and off,
it’s an ideal system for computers. As has been said many times, a computer thinks only
in numbers, and numbers are represented by sets of “switches.” Each switch represents
one bit of information, and each bit can be either “on” or “off.” (The word bit is a shortened term for the expression “binary digit.”) With eight such switches (bits), you can represent any number from 0 to 255. With 32 switches (bits), you can represent any number
up to 4294967295. With 64 switches (bits), you can represent any number up to
18,446,744,073,709,551,615. This is also known as a “quad word.”

The computer’s native environment is designed to perform calculations very fast with any
number using base 2, and this is relative to the number of bits of the processor. A 64-bit
machine can handle far bigger calculations than a 32-bit one. Not all bits are used, however. Usually, one bit is set aside to represent whether the number is positive or negative.
As a result, a 32-bit machine processes numbers from −2147483647 to 2147483647,
instead only a positive range of numbers up to 4294967295.
Since performing operations like addition and multiplication is so easy, binary computations are especially fast. Here is an algorithm that adds two numbers represented as
strings in binary:


Representing Rational and Irrational Numbers
--------------------------------------------
Thus far, the focus has been on integers, but base notation can be used to represent non-
integers, also. The essential activity in this respect is to count down or up from 1. To
accomplish this, a marker is used. The marker is referred to as the radix point. The radix
point establishes the point at which to start counting. To work with decimal numbers, the
radix point is called the decimal point, and the first column after the decimal point represents tenths, the second is hundredths, and so on. In binary, the first column after the
radix point represents halves, the second quarters, and so on. Given this scheme of things,
the number 1 3 8 is represented in binary as 1.011 (1 + 1 4 + 1 8 ).
⁄
⁄
⁄
But there is a problem with this system, which is that not all fractions can be represented
this way. In decimal, it is troublesome representing 1 3 , because this fraction cannot
be expressed as a sum of tenths, hundredths, and so on. It turns out to be the limit of the
⁄
⁄
infinite series 3 + 3 + 3 + . . . . You express this by writing 1 3 in decimal as 0.333. . . .

In binary, the situation is even worse. You cannot express any fraction whose denominator is divisible by any number other than 2. Consider, for example, that in decimal, 1 5 is
exactly 0.2. In binary, however, it is the infinitely repeating number, 0.001100110011. . . .
Because such numbers have no definitive termination point, computers have trouble with
them.
⁄
There are two ways to get around this problem. One is to forget radix points and instead
to represent the fraction in terms of its constituent integers, the numerator and denominator. Then every rational number can be represented exactly, without any troublesome repeating digits. Unfortunately, there are disadvantages to this as well. If you
add 1 2 and 1 3 , the answer is expressed as follows: 5 6 . 5 6 + 1 7 = 41 42 .
41
1
493
42 + 11 =
462 . This is known as an incompatible fraction. With such a fraction, the
denominators have no common factor (covered more extensively in Chapter 2), so as you
work with the fraction, you end up increasing the complexity of the denominator. As a
result, it is easy to go above the computer’s maximum size for integers. Even if the maximum is not reached, the computer slows down as it carries out its calculations with
increasingly bulky numbers. Except in very special cases, then, approaching fractions in
this way is not a sensible move.

Another problem with this approach is the existence of the irrational numbers, which
can’t be expressed exactly as a fraction. Instead, you are forced to find an approximation.
To arrive at an approximation, computers use the base system to represent non-integers,
and round the number to the nearest digit.
There can also be problems with this, however. Consider what occurs if a fixed-point
representation of numbers is used. With this approach, a fixed set of digits (eight, for
example) is used after the radix point. With only a limited number of bits to play with
for each number, each bit added to the end means one less bit to use at the top. As a result,
you are limiting how large and how small numbers can be. Allowing the radix point to be
altered changes this situation, and this is what most programming languages do. This alternative is called floating-point representation, similar to what is called scientific notation.
In scientific notation, a number is represented by giving the first “significant” (non-zero)
digit, and then as many digits as required after that. Then you give an indication of where
to place the radix. For example, the number 201.49 could be represented by (20149; 3).
In fact, it is represented as “2.0149 e2.” By convention, you start with the radix after the
first digit and count from there. You can count forward or backward (for example, 2.0149
e–3 is 0.0020149). The index (e3) number is called the exponent.

Standards and Computed Numbers
------------------------------
Floating-point numbers use a system similar to scientific notation. There are a number of
standard formats. One has been established by the Institute of Electrical and Electronics
Engineers (IEEE), an organization that has created many standard formats that are used
commonly by computer manufacturers. These standards are important for creating a com-
mon language between different hardware.
As established in the IEEE standards, if you are working with 32 bits, you use 1 bit for
the sign (positive or negative) and 8 bits for the position of the radix point, from −127
(relative to a value of zero) to +127. This gives a total value of 255. The value of the actual
number can then go as high as a little under 2 128 . The remaining 23 bits represent the
mantissa, or actual digits of the number. Rather ingeniously, because the first significant
digit of a binary number is always 1, there is no need to include this digit in the computer’s representation of the number. It is just implicitly there, which provides one more
digit of precision. The actual digits of the floating-point representation are correctly called
the significand, although the word mantissa is used for this, too.

Considerations
--------------
In the operations just examined, the only problem with omitting the initial 1 of the mantissa is that it apparently leaves no way to represent a floating-point value of exactly zero.
Fortunately, one extra trick can be added, which is to say that when the exponent part of
the number is zero, the leading 1 is not to be assumed. This also means that numbers
smaller than 2 –127 can be represented as long as it is accepted that these numbers will be
less precise than usual. Using this trick of denormalization, numbers as low as 2 –149 can
be represented.
As you might expect, zero is represented by the floating-point number given by a zero
significand and a zero exponent. The positive/negative bit can be either value. There are
also a number of other special cases, which represent overflow and underflow, as well as
the value NaN (“Not a Number”). The value NaN is sometimes returned when you attempt
to do something that has no valid answer. An example of this is trying to find the square
root of –1.
How this pans out can be shown by considering the value given in decimal by 2 e–40.
Here are the main features of the operations:

Common Functions
----------------
This section explores a few functions that are common, in one form or another, to most
computer languages: abs() , floor() , ceil(), and round() . Some languages provide these
functions with different names, but they work the same, and the fact that they are so
commonly provided testifies to their usefulness. In this context, the discussion involves
how they are implemented.

Absolute Values
---------------
The simplest of them is the abs() function, which returns the absolute value of a num-
ber (float or integer). This is the value of the number, ignoring whether it is positive or
negative. A function that finds the absolute value can be implemented this way:

function abs(n)
if n>=0 then return n
otherwise return -n
end function

The absolute value of a number is its value made positive. In the abs() function, if n is
negative then −n is positive. Of course, the computer doesn’t natively need to do anything
even this complicated. It simply sets the value of the sign bit in the floating-point or integer representation to 0.

Three functions are commonly used to convert float to integer values. Their specific
purposes are as follows:
■ For a number n, the floor() function finds the largest integer less than n.
■ For a number n, the ceil() function finds the smallest integer greater than n.
■ For a number n, the round( ) function finds the integer nearest to n.
Figure 1.2 illustrates the actions of these three functions. Each range is represented
by a solid line at one end and a broken line at the other. The solid and broken lines represent inclusion. For example, with floor(n)=3, n is greater than or equal to 3 but less
than 4.

Each of these functions is useful in different circumstances. The floor() and ceil() functions are easy for the computer to calculate using floating-point representations. If the
exponent of the number is 5, then the functions can find the positive integer part (call
it p) of the number by taking the first five digits of the significand. If it’s less than 1, the
integer part is zero. If it is greater than the number of digits in the significand, then
the function does not know the exact integer part. All that is then necessary is to check
the sign of the number. If it is positive, then floor(n) is equal to p and ceil(n) is p + 1.
If it’s negative, then ceil(n) is –p and floor(n) is –( p + 1) .
The round() function rounds to the nearest whole number. This version of rounding is
what most people learn in their early studies of math. The round() function finds an integer such that abs(n - round(n)) < 1 . Numbers exactly halfway between two integers,
such as 1.5, are ambiguous. You define the round() function to round up in such cases.
Given that the floor() and ceil() are defined, the round() function can be implemented
as follows:

While the round() function suffices to illustrate how a number can be rounded, it remains
that it is simpler to calculate the value directly from the floating-point representation.
Using this approach, you find the integer part p as before. To decide whether to round up
or down, you look at the next digit of the significand, which in binary represents the value
1 . If this digit is 0, then the fractional part of the number is less than 1 , which means
2
2
that you round down. If it’s 1, then the fractional part is greater than or equal to 1 2 . If it is
greater than or equal, you round up. The arbitrary decision to round up halves turns out to
be quite handy. If you round them down, and the first digit of the fractional part is a 1, you
still do not know whether to round up or down without looking at the rest of the digits.


