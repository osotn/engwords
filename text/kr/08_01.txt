8.1 File Descriptors
In the UNIX operating system, all input and output is done by reading or writing files, because
all peripheral devices, even keyboard and screen, are files in the file system. This means that a
single homogeneous interface handles all communication between a program and peripheral
devices.
In the most general case, before you read and write a file, you must inform the system of your
intent to do so, a process called opening the file. If you are going to write on a file it may also
be necessary to create it or to discard its previous contents. The system checks your right to do
so (Does the file exist? Do you have permission to access it?) and if all is well, returns to the
program a small non-negative integer called a file descriptor. Whenever input or output is to
be done on the file, the file descriptor is used instead of the name to identify the file. (A file
descriptor is analogous to the file pointer used by the standard library, or to the file handle of
MS-DOS.) All information about an open file is maintained by the system; the user program
refers to the file only by the file descriptor.
Since input and output involving keyboard and screen is so common, special arrangements
exist to make this convenient. When the command interpreter (the ``shell'') runs a program,
three files are open, with file descriptors 0, 1, and 2, called the standard input, the standard
output, and the standard error. If a program reads 0 and writes 1 and 2, it can do input and
output without worrying about opening files.
The user of a program can redirect I/O to and from files with < and >:
prog <infile >outfile
In this case, the shell changes the default assignments for the file descriptors 0 and 1 to the
named files. Normally file descriptor 2 remains attached to the screen, so error messages can
go there. Similar observations hold for input or output associated with a pipe. In all cases, the
file assignments are changed by the shell, not by the program. The program does not know
where its input comes from nor where its output goes, so long as it uses file 0 for input and 1
and 2 for output.
