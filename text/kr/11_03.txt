B.3 String Functions: <string.h>
There are two groups of string functions defined in the header <string.h> . The first have
names beginning with str ; the second have names beginning with mem . Except for memmove ,
the behavior is undefined if copying takes place between overlapping objects. Comparison
functions treat arguments as unsigned char arrays.207
In the following table, variables s and t are of type char * ; cs and ct are of type const char
* ; n is of type size_t ; and c is an int converted to char .
copy string ct to string s , including '\0' ; return s .
copy at most n characters of string ct to s ; return s . Pad with '\0' 's
if ct has fewer than n characters.
concatenate string ct to end of string s ; return s .
char
concatenate at most n characters of string ct to string s , terminate s
*strncat(s,ct,n)
with '\0' ; return s .
compare string cs to string ct , return <0 if cs<ct , 0 if cs==ct , or >0
int strcmp(cs,ct)
if cs>ct .
int
compare at most n characters of string cs to string ct ; return <0 if
strncmp(cs,ct,n)
cs<ct , 0 if cs==ct , or >0 if cs>ct .
char *strchr(cs,c) return pointer to first occurrence of c in cs or NULL if not present.
char *strrchr(cs,c) return pointer to last occurrence of c in cs or NULL if not present.
size_t
return length of prefix of cs consisting of characters in ct .
strspn(cs,ct)
char *strcpy(s,ct)
char
*strncpy(s,ct,n)
char *strcat(s,ct)
size_t
strcspn(cs,ct)
char
*strpbrk(cs,ct)
return length of prefix of cs consisting of characters not in ct .
return pointer to first occurrence in string cs of any character string
ct , or NULL if not present.
return pointer to first occurrence of string ct in cs , or NULL if not
char *strstr(cs,ct)
present.
size_t strlen(cs)
return length of cs .
return pointer to implementation-defined string corresponding to
char *strerror(n)
error n .
strtok searches s for tokens delimited by characters from ct ; see
char *strtok(s,ct)
below.
A sequence of calls of strtok(s,ct) splits s into tokens, each delimited by a character from
ct . The first call in a sequence has a non- NULL s , it finds the first token in s consisting of
characters not in ct ; it terminates that by overwriting the next character of s with '\0' and
returns a pointer to the token. Each subsequent call, indicated by a NULL value of s , returns the
next such token, searching from just past the end of the previous one. strtok returns NULL
when no further token is found. The string ct may be different on each call.
The mem... functions are meant for manipulating objects as character arrays; the intent is an
interface to efficient routines. In the following table, s and t are of type void * ; cs and ct are
of type const void * ; n is of type size_t ; and c is an int converted to an unsigned char .
void
*memcpy(s,ct,n)
void
*memmove(s,ct,n)
int memcmp(cs,ct,n)
void
*memchr(cs,c,n)
copy n characters from ct to s , and return s .
same as memcpy except that it works even if the objects overlap.
compare the first n characters of cs with ct ; return as with strcmp .
return pointer to first occurrence of character c in cs , or NULL if not
present among the first n characters.
void *memset(s,c,n) place character c into first n characters of s , return s .
