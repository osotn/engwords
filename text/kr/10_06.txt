A.6 Conversions
Some operators may, depending on their operands, cause conversion of the value of an
operand from one type to another. This section explains the result to be expected from such
conversions. Par.6.5 summarizes the conversions demanded by most ordinary operators; it will
be supplemented as required by the discussion of each operator.
A.6.1 Integral Promotion
A character, a short integer, or an integer bit-field, all either signed or not, or an object of
enumeration type, may be used in an expression wherever an integer may be used. If an int
can represent all the values of the original type, then the value is converted to int ; otherwise
the value is converted to unsigned int . This process is called integral promotion.
A.6.2 Integral Conversions
Any integer is converted to a given unsigned type by finding the smallest non-negative value
that is congruent to that integer, modulo one more than the largest value that can be
represented in the unsigned type. In a two's complement representation, this is equivalent to
left-truncation if the bit pattern of the unsigned type is narrower, and to zero-filling unsigned
values and sign-extending signed values if the unsigned type is wider.
When any integer is converted to a signed type, the value is unchanged if it can be represented
in the new type and is implementation-defined otherwise.
A.6.3 Integer and Floating
When a value of floating type is converted to integral type, the fractional part is discarded; if
the resulting value cannot be represented in the integral type, the behavior is undefined. In
particular, the result of converting negative floating values to unsigned integral types is not
specified.
When a value of integral type is converted to floating, and the value is in the representable
range but is not exactly representable, then the result may be either the next higher or next
lower representable value. If the result is out of range, the behavior is undefined.
A.6.4 Floating Types
When a less precise floating value is converted to an equally or more precise floating type, the
value is unchanged. When a more precise floating value is converted to a less precise floating
type, and the value is within representable range, the result may be either the next higher or the
next lower representable value. If the result is out of range, the behavior is undefined.
A.6.5 Arithmetic Conversions
Many operators cause conversions and yield result types in a similar way. The effect is to bring
operands into a common type, which is also the type of the result. This pattern is called the
usual arithmetic conversions.
• First, if either operand is long double , the other is converted to long double .
• Otherwise, if either operand is double , the other is converted to double .
• Otherwise, if either operand is float , the other is converted to float .
• Otherwise, the integral promotions are performed on both operands; then, if either
operand is unsigned long int , the other is converted to unsigned long int .160
• Otherwise, if one operand is long int and the other is unsigned int , the effect
depends on whether a long int can represent all values of an unsigned int ; if so,
the unsigned int operand is converted to long int ; if not, both are converted to
unsigned long int .
• Otherwise, if one operand is long int , the other is converted to long int .
• Otherwise, if either operand is unsigned int , the other is converted to unsigned
int .
• Otherwise, both operands have type int .
There are two changes here. First, arithmetic on float operands may be done in single precision,
rather than double; the first edition specified that all floating arithmetic was double precision. Second,
shorter unsigned types, when combined with a larger signed type, do not propagate the unsigned
property to the result type; in the first edition, the unsigned always dominated. The new rules are
slightly more complicated, but reduce somewhat the surprises that may occur when an unsigned
quantity meets signed. Unexpected results may still occur when an unsigned expression is compared to
a signed expression of the same size.
A.6.6 Pointers and Integers
An expression of integral type may be added to or subtracted from a pointer; in such a case the
integral expression is converted as specified in the discussion of the addition operator
(Par.A.7.7).
Two pointers to objects of the same type, in the same array, may be subtracted; the result is
converted to an integer as specified in the discussion of the subtraction operator (Par.A.7.7).
An integral constant expression with value 0, or such an expression cast to type void * , may
be converted, by a cast, by assignment, or by comparison, to a pointer of any type. This
produces a null pointer that is equal to another null pointer of the same type, but unequal to
any pointer to a function or object.
Certain other conversions involving pointers are permitted, but have implementation-defined
aspects. They must be specified by an explicit type-conversion operator, or cast (Pars.A.7.5
and A.8.8).
A pointer may be converted to an integral type large enough to hold it; the required size is
implementation-dependent. The mapping function is also implementation-dependent.
A pointer to one type may be converted to a pointer to another type. The resulting pointer may
cause addressing exceptions if the subject pointer does not refer to an object suitably aligned in
storage. It is guaranteed that a pointer to an object may be converted to a pointer to an object
whose type requires less or equally strict storage alignment and back again without change; the
notion of ``alignment'' is implementation-dependent, but objects of the char types have least
strict alignment requirements. As described in Par.A.6.8, a pointer may also be converted to
type void * and back again without change.
A pointer may be converted to another pointer whose type is the same except for the addition
or removal of qualifiers (Pars.A.4.4, A.8.2) of the object type to which the pointer refers. If
qualifiers are added, the new pointer is equivalent to the old except for restrictions implied by
the new qualifiers. If qualifiers are removed, operations on the underlying object remain subject
to the qualifiers in its actual declaration.
Finally, a pointer to a function may be converted to a pointer to another function type. Calling
the function specified by the converted pointer is implementation-dependent; however, if the
converted pointer is reconverted to its original type, the result is identical to the original
pointer.161
A.6.7 Void
The (nonexistent) value of a void object may not be used in any way, and neither explicit nor
implicit conversion to any non-void type may be applied. Because a void expression denotes a
nonexistent value, such an expression may be used only where the value is not required, for
example as an expression statement (Par.A.9.2) or as the left operand of a comma operator
(Par.A.7.18).
An expression may be converted to type void by a cast. For example, a void cast documents
the discarding of the value of a function call used as an expression statement.
void did not appear in the first edition of this book, but has become common since.
A.6.8 Pointers to Void
Any pointer to an object may be converted to type void * without loss of information. If the
result is converted back to the original pointer type, the original pointer is recovered. Unlike
the pointer-to-pointer conversions discussed in Par.A.6.6, which generally require an explicit
cast, pointers may be assigned to and from pointers of type void * , and may be compared
with them.
This interpretation of void * pointers is new; previously, char * pointers played the role of
generic pointer. The ANSI standard specifically blesses the meeting of void * pointers with object
pointers in assignments and relationals, while requiring explicit casts for other pointer mixtures.
