3.3 Creating new commands
It's now time to move on to something that we promised in Chapter 1 -
how to create new commands out of old ones.
Given a sequence of commands that is to be repeated more than a few
times, it would be convenient to make it into a "new" command with its own
name, so you can use it like a regular command. To be specific, suppose you
intend to count users frequently with the pipeline
$ who : we -1
that was mentioned in Chapter 1, and you want to make a new program nu to
do that.
The first step is to create an ordinary file that contains 'who ; we -1' .
You can use a favorite editor, or you can get creative:
$ echo 'who: we -1' >nu
(Without the quotes, what would appear in nu?)
As we said in Chapter 1, the shell is a program just like an editor or who or
we; its name is she And since it's a program, you can run it and redirect its
input. So run the shell with its input coming from the file nu instead of the
terminal:
$ who
you tty2 Sep 28 07:51
rhh tty4 Sep 28 10:02
moh tty5 Sep 28 09:38
ava tty6 Sep 28 10:17
$ cat nu
who I we -1
I
$ sh <nu
4
$
The output is the same as it would have been if you had typed who ; we -1
at the terminal.
Again like most other programs, the shell takes its input from a file if one
is named as an argument; you could have written
$ sh nu
for the same result. But it's a nuisance to have to type "sh" in either case: it's
longer, and it creates a distinction between programs written in, say, C ",nd
ones written by connecting programs with the shell. t Therefore, if a file is executable and if it contains text, then the shell assumes it to be a file 01 shell
commands. Such a file is called a shell file. All you have to do is to make nu
executable, once:
$ chmod +x nu
and thereafter you can invoke it with
$ nu
From now on, users of nu cannot tell, just by running it, that you implemented
it in this easy way.
The way the shell actually runs nu is to create a new shell process exactly
as if you had typed
$ sh nu
This child shell is called a sub-shell - a shell process invoked by your current
shell. sh nu is not the same as sh <nu, because its standard input is still connected to the terminal.
As it stands, nu works only if it's in your current directory (provided, of
course, that the current directory is in your PATH, which we will assume from
now on). To make nu part of your repertoire regardless of what directory
you're in, move it to your private bin directory, and add /usr/you/bin to
your search path:
$ pwd
/usr/you
$ mkdir bin Make a bin if you haven't already
$ echo $PATH Check PATH for sure
: /usr /you/bin: /bin: /usr /bin Should look like this
$ mv nu bin Install nu
$ 1s nu
nu not found It's really gone from current directory
$ nu
4
But it's found by the shell
$
Of course, your PATH should be set properly by your . profile, so you don't
have to reset it every time you log in.
There are other simple commands that you might create this way to tailor
t Nonetheless, it is a distinction made on most other operating systems.
your environment to your own taste. Some that we have found convenient
include
. es, which echoes the proper sequence of mysterious characters to clear the
screen on your terminal (24 newlines is a fairly general implementation);
. what, which runs who and ps -a to tell who's logged on and what they are
doing;
. where, which prints the identifying name of the UNIX system you're using
- it's handy if you use several regularly. (Setting PS 1 serves a similar
purpose. )
Exercise 3-9. Look in /bin and /usr /bin to see how many commands are actually
shell files. Can you do it with one command? Hint: file(l). How accurate are
guesses based on file length?
