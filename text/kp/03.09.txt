3e9 bundle: putting it all together
To give something of the flavor of how shell files develop, let's work
through a larger example. Pretend you have received mail from a friend on
another machine, say somewhere! bob, t who would like copies of the shell
files in your bin. The simplest way to send them is by return mail, so you
might start by typing
$ cd /usr/you/bin
$ for i in 'pick *'
> do
> echo ============ This is file $i
> cat $i
> done : mail somewhere!bob
$
------------
------------
But look at it from somewhere! bob's viewpoint: he's going to get a mail message with all the files clearly demarcated, but he'll need to use an editor to
break them into their component files. The flash of insight is that a proper lyconstructed mail message could automatically unpack itself so the recipient
needn't do any work. That implies it should be a shell file containing both the
t There are sxeral notations for remote machine addresses. The form machine! person is most
common. See mail(l).
files and the instructions to unpack it.
A second insight is that the shell's here documents are a convenient way to
combine a command invocation and the data for the command. The rest of the
job is just getting the quotes right. Here's a working program, called bundle,
that groups the files together into a self-explanatory shell file on its standard
output:
$ cat bundle
# bundle: group files into distribution package
echo '# To unbundle, sh this file'
for i
do
echo "echo $i 1>&2"
echo "cat >$i «'End of $i'"
cat $i
echo "End of $i"
done
$
Quoting "End of $i" ensures that any shell metacharacters in the files will be
ign ored .
Naturally, you should try it out before inflicting it on somewhere! bob:
$ bundle ex lc > junk Make a trial bundle
$ cat junk
# To unbundle, sh this file
echo ex 1>&2
cat >cx «'End of ex'
chmod +x $*
End of ex
echo Ie 1>&2
cat >lc «'End of Ie'
# Ie: count number of lines in files
we -1 $*
End of Ie
$ mkdir test
$ cd test
$ sh .. /junk Try it out
ex
Ie
$ ls
ex
Ie
$ cat ex
chmod +x $*
$ cat Ie
# Ie: count number of lines in files
we -1 $*
$ cd 0 0
$ rm junk test/*; rmdir test
$ pwd
/usr/you/bin
$ bundle 'pick *' f mail somewhere!bob
Looks good
Clean up
Send the files
There's a problem if one of the files you're sending happens to contain a
line of the form
End of filename
but it's a low-probability event. To make bundle utterly safe, we need a
thing or two from later chapters, but it's eminently usable and convenient as it
stands.
bundle illustrates much of the flexibility of the UNIX environment: it uses
shell loops, I/O redirection, here documents and shell files, it interfaces
directly to mai l, and, perhaps most interesting, it is a program that creates a
program. It's one of the prettiest shell programs we know - a few lines of
code thJ.t do something simple, useful and elegant.
Exercise 3-17. How would you use bundle to send all the files in a directory and its
subdirectories? Hint: shell files can be recursive. 0
Exercise 3-18. Modify bundle so it includes with each file the information garnered
from 1 s -1, particularly permissions and date of last change. Contrast the facilities of
bundle with the archive program ar( 1).

