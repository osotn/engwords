2.2 What's in a file?
The format of a file is determined by the programs that use it; there is a
wide variety of file types, perhaps because there is a wide variety of programs.
But since file types are not determined by the file system, the kernel can't tell
you the type of a file: it doesn't know it. The file command makes an educated guess (we'll explain how shortly):
$ file /bin /bin/ed /usr/src/cmd/edec /usr/man/man1/ede 1
/bin: directory
/bin/ed: pure executable
/usr/src/cmd/ed.c: c program text
/usr/man/man1/ed.1: roff, nroff, or eqn input text
$
These are four fairly typical files, all related to the editor: the directory in
which it resides (/bin), the "binary" or runnable program itself (/bin/ ed) ,
the "source" or C statements that define the program (/usr /src/cmd/ed. c)
and the manual page (/usr/man/man 1/ed. 1).
To determine the types, file didn't pay attention to the names (although it
could have), because naming conventions are just conventions, and thus not
perfectly reliable. For example, files suffixed . c are almost always C source,
but there is nothing to prevent you from creating a . c file with arbitrary contents. Instead, file reads the first few hundred bytes of a file and looks for
clues to the file type. (As we will show later on, files with special system properties, such as directories, can be identified by asking the system, but file
could identify a directory by reading it.)
Sometimes the clues are obvious. A runnable program is marked by a
binary "magic number" at its beginning. ad with no options dumps the file in
16-bit, or 2-byte, words and makes the magic number visible:
$ ad /bin/ed
0000000 000410 025000 000462 011444 000000 000000 000000 000001
0000020 170011 016600 000002 005060 177776 010600 162706 000004
0000040 016616 000004 005720 010066 000002 005720 001376 020076
$
The octal value 410 marks a pure executable program, one for which the executing code may be shared by several processes. (Specific magic numbers are
system dependent.) The bit pattern represented by 410 is not ASCII text, so
this value could not be created inadvertently by a program like an editor. But
you could certainly create such a file by running a program of your own, and
the system understands the convention that such files are program binaries.
For text files, the clues may be deeper in the file, so file looks for words
like #include to identify C source, or lines beginning with a period to identify nraff or traff input.
You might wonder why the system doesn't track file types more carefully,
so that, for example, sort is never given /bin/ed as input. One reason is to
avoid foreclosing some useful computation. Although
$ sort /bin/ed
doesn't make much sense, there are many commands that can operate on any
file at all, and there's no reason to restrict their capabilities. od, wc, cp, crop,
file and many others process files regardless of their contents. But the formatless idea goes deeper than that. If, say, nroff input were distinguished
from C source, the editor would be forced to make the distinction when it
created a file, and probably when it read in a file for editing again. And it
would certainly make it harder for us to typeset the C programs in Chapters 6
through 8!
Instead of creating distinctions, the UNIX system tries to efface them. All
text consists of lines terminated by newline characters, and most programs
understand this simple format. Many times while writing this book, we ran
commands to create text files, processed them with commands like those listed
above, and used an editor to merge them into the troff input for the book.
The transcripts you see on almost every page are made by commands like
$ od -c junk >temp
$ ed ch2. 1
1534
r temp
168
od produces text on its standard output, which can then be used anywhere text
can be used. This uniformity is unusual; most systems have several file formats, even for text, and require negotiation by a program or a user to create a
file of a particular type. In UNIX systems there is just one kind of file, and all
that is required to access a file is its name. t
The lack of file formats is an advantage overall - programmers needn't
worry about file types, and all the standard programs will work on any file -
but there are a handful of drawbacks. Programs that sort and search and edit
really expect text as input: grep can't examine binary files correctly, nor can
sort sort them, nor can any standard editor manipulate them.
There are implementation limitations with most programs that expect text as
input. We tested a number of programs on a 30,000 byte text file containing
no newlines, and surprisingly few behaved properly, because most programs
make unadvertised assumptions about the maximum length of a line of text
(for an exception, see the BUGS section of sort( 1)).
t There's a good test of file system uniformity, due originally to Doug McIlroy, that the UNIX file
system passes handily. Can the output of a FORTRAN program be used as input to the FORTRAN
compiler? A remarkable number of systems have trouble with this test
Non-text files definitely have their place. For example, very large databases usually need extra address information for rapid access; this has to be
binary for efficiency. But every file format that is not text must have its own
family of support programs to do things that the standard tools could perform
if the format were text. Text files may be a little less efficient in machine
cycles, but this must be balanced against the cost of extra software to maintain
more specialized formats. If you design a file format, you should think carefully before choosing a non-textual representation. (You should also think
about making your programs robust in the face of long input lines.)

