3.8 Looping in shell programs
The shell is actually a programming language: it has variables, loops,
decision-making, and so on. We will discuss basic looping here, and talk more
about control flow in Chapter 5.
Looping over a set of filenames is very common, and the shell's for statement is the only shell control-flow statement that you might commonly type at
the terminal rather than putting in a file for later execution. The syntax is:
for var in list of words
do
commands
done
For example, a for statement to echo filenames one per line is just
$ for i in *
> do
> echo $i
> done
The "i" can be any shell variable, although i is traditional. Note that the
variable's value is accessed by $ i, but that the f or loop refers to the variable
as i. We used * to pick up all the files in the current directory, but any other
list of arguments can be used. Normally you want to do something more
interesting than merely printing filenames. One thing we do frequently is to
compare a set of files with previous versions. For example, to compare the old
version of Chapter 2 (kept in directory old) with the current one:
$ 1s ch2.*
ch2.1
ch2.6
$ for i
> do
I 5
ch2.2
ch2.7
in ch2.*
ch2.3
ch2.4
ch2.5
> echo $i:
> diff -b o1d/$i $i
> echo
> done I pr -h "diff 'pwd'/o1d
3712
$
Add a blank line for readability
'pwd'" I 1pr &.
Process-id
We piped the output into pr and Ipr just to illustrate that it's possible: the
standard output of the programs within a for goes to the standard output of
the for itself. We put a fancy heading on the output with the -h option of
pr, using two embedded calls of pwd. And we set the whole sequence running
asynchronously .(&) so we wouldn't have to wait for it; the & applies to the
entire loop and pipeline.
We prefer to format a for statement as shown, but you can compress it
somewhat. The main limitations are that do and done are only recognized as
keywords when they appear right after a newline or semicolon. Depending on
the size of the for, it's sometimes better to write it all on one line:
for i in list; do commands; done
You should use the for loop for multiple commands, or where the built-in
argument processing in individual commands is not suitable. But don't use it
when the individual command will already loop over filenames:
# Poor idea:
for i in $*
do
chmod +x $i
done
is inferior to
chmod +x $*
because the for loop executes a separate chmod for each file, which is more
expensive in computer resources. (Be sure that you understand the difference
between
for i in *
which loops over all filenames in the current directory, and
for i in $*
which loops over all arguments to the shell file.)
The argument list for a for most often comes from pattern matching on
filenames, but it can come from anything. It could be
$ for i in 'cat ...'
or arguments could just be typed. For example, earlier in this chapter we
created a group of programs for multi-column printing, called 2, 3, and so on.
These are just links to a single file that can be made, once the file 2 has been
written, by
$ for i in 3 4 5 6; do In 2 $i; done
$
As a somewhat more interesting use of the for, we could use pick to
select which files to compare with those in the backup directory:
$ :Eor i
> do
>
>
> done
ch2.1?
ch2.2?
ch2.3?
ch2.4?
ch2.5?
ch2.6?
ch2.7?
$
in 'pick ch2.*'
echo $i:
diff old/$i $i
I pr , lpr
I I
Y
y
y
It's obvious that this loop should be placed in a shell file to save typing next
time: if you've done something twice, you're likely to do it again.
Exercise 3-15. If the diff loop were placed in a shell file, would you put the pick in
the shell file? Why or why not? 0
Exercise 3-16. What happens if the last line of the loop above is
> done / pr / Ipr &
that is, ends with an ampersand? See if you can figure it out, then try it.

