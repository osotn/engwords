Lesson 1.1:  MOVING THE CURSOR


   ** To move the cursor, press the h,j,k,l keys as indicated. **
	     ^
	     k		    Hint:  The h key is at the left and moves left.
       < h	 l >		   The l key is at the right and moves right.
	     j			   The j key looks like a down arrow.
	     v

Lesson 1.2: EXITING VIM

  1. Press the <ESC> key (to make sure you are in Normal mode).
  2. Type:	:q! <ENTER>.
     This exits the editor, DISCARDING any changes you have made.

Lesson 1.3: TEXT EDITING - DELETION
    ** Press  x  to delete the character under the cursor. **

Lesson 1.4: TEXT EDITING - INSERTION
    ** Press  i  to insert text. **
  Move the cursor on top of the first character AFTER where the text is to be inserted.

Lesson 1.5: TEXT EDITING - APPENDING
    ** Press  A  to append text. **
		     
Lesson 1.6: EDITING A FILE
    ** Use  :wq  to save a file and exit. **


Lesson 2.1: DELETION COMMANDS
    ** Type  dw  to delete a word. **

Lesson 2.2: MORE DELETION COMMANDS
    ** Type  d$	to delete to the end of the line. **

Lesson 2.3: ON OPERATORS AND MOTIONS
  Many commands that change text are made from an operator and a motion.
  The format for a delete command with the  d  delete operator is as follows:

  	d   motion

  Where:
    d      - is the delete operator.
    motion - is what the operator will operate on (listed below).

  A short list of motions:
    w or W - until the start of the next word, EXCLUDING its first character.
    e or E - to the end of the current word, INCLUDING the last character.
    b or B - previous words
    $      - to the end of the line, INCLUDING the last character.
		     
Lesson 2.4: USING A COUNT FOR A MOTION
    ** Typing a number before a motion repeats it that many times. **

Lesson 2.5: USING A COUNT TO DELETE MORE
    ** Typing a number with an operator repeats it that many times. **
	 d   number   motion

Lesson 2.6: OPERATING ON LINES
    ** Type  dd   to delete a whole line. **

Lesson 2.7: THE UNDO COMMAND
    ** Press  u	to undo the last commands,   U  to fix a whole line. **
   Type CTRL-R a few times
       to redo the commands (undo the undo's).

Lesson 3.1: THE PUT COMMAND
    ** Type	p  to put previously deleted text after the cursor. **

Lesson 3.2: THE REPLACE COMMAND
    ** Type  rx  to replace the character at the cursor with  x . **

Lesson 3.3: THE CHANGE OPERATOR
    ** To change until the end of a word, type  ce . **
   Notice that  ce  deletes the word and places you in Insert mode.
		       
Lesson 3.4: MORE CHANGES USING c
    ** The change operator is used with the same motions as delete. **
         c    [number]   motion

Lesson 4.1: CURSOR LOCATION AND FILE STATUS
  ** Type CTRL-G to show your location in the file and the file status.
     Type  G  to move to a line in the file. **
NOTE:  You may see the cursor position in the lower right corner of the screen
       This happens when the 'ruler' option is set (see  :help 'ruler'  )
  Press  G  to move you to the bottom (end) of the file.
  Type  gg  to move you to the start of the file.
			
Lesson 4.2: THE SEARCH COMMAND
     ** Type  /  followed by a phrase to search for the phrase. **
  Press / and then typing your search pattern.
  (Pressing Esc will cancel it, while pressing Enter will perform the search). 
  To search for the same phrase again, simply type  n .
  To search for the same phrase in the opposite direction, type  N .
  To search for a phrase in the backward direction, use  ?  instead of  / .
  (If you pressed ? then n - would be case backwards, and N - forwards).
  To go back to where you came from press  CTRL-O
  Repeat to go back further.  CTRL-I goes forward.
  Tip: gnn = search the top case, GN = search the bottom case.
  To search for words under your cursor press * or # (backwards).
  (searching for exact words, for pattern use g* and g#).
  Vim keeps a search history. Just type / or ? and to go through previous
  search command.
  Press / then press Ctrl-r and then Ctrl-w then edit current word and Enter.
  This will also work for :s and :g commands.
   

Lesson 4.3: MATCHING PARENTHESES SEARCH
  ** Type  %  to find a matching ),], or } (parenthesis or bracket)**

Lesson 4.4: THE SUBSTITUTE COMMAND
  ** Type  :s/old/new/g  to substitute 'new' for 'old'. **
  Adding the  g  flag means to substitute globally in the line.
  To change every occurrence of a character string between two lines,
     type   :#,#s/old/new/g    where #,# are the line numbers of the range
                               of lines where the substitution is to be done.
     Type   :%s/old/new/g      to change every occurrence in the whole file.
     Type   :%s/old/new/gc     to find every occurrence in the whole file,
     			       with a prompt whether to substitute or not.

Lesson 5.1: HOW TO EXECUTE AN EXTERNAL COMMAND
  ** Type  :! (exclamation command) followed by an external command to execute that command. **

Lesson 5.2: MORE ON WRITING FILES
  ** To save the changes made to the text, type  :w FILENAME. **
		    
Lesson 5.3: SELECTING TEXT TO WRITE
  ** To save part of the file, type  v  motion  :w FILENAME **
  Press  v  and move the cursor to the fifth item below.  Notice that the text is highlighted.
  Press the  :  character.  At the bottom of the screen  :'<,'> will appear.
  Type  w TEST  , where TEST is a filename that does not exist yet.  
  NOTE:  Pressing  v  starts Visual selection.  You can move the cursor around
       to make the selection bigger or smaller.  Then you can use an operator
       to do something with the text.  For example,  d  deletes the text.
  CTRL-v - visual block vertical.
  CTRL-v + do select block + c (change) + <new pattern> + <Enter> - block replacement!

Lesson 5.4: RETRIEVING AND MERGING FILES
  ** To insert the contents of a file, type  :r FILENAME  **
  The file you retrieve is placed below the cursor line.
  NOTE:  You can also read the output of an external command.  For example,
       :r !ls  reads the output of the ls command and puts it below the
       cursor.

Lesson 6.1: THE OPEN COMMAND
  ** Type  o  to open a line below the cursor and place you in Insert mode. **
  To open up a line ABOVE the cursor, simply type a capital	O 

Lesson 6.2: THE APPEND COMMAND
  ** Type  a  to insert text AFTER the cursor. **
  NOTE:  a, i and A all go to the same Insert mode, the only difference is where
       the characters are inserted.
		    
Lesson 6.3: ANOTHER WAY TO REPLACE
  ** Type a capital  R  to replace more than one character. **
  Press <ESC> to leave Replace mode.

Lesson 6.4: COPY AND PASTE TEXT
  ** Use the  y (= yank) operator to copy text and  p (= paste)  to paste it **

Lesson 6.5: SET OPTION
  ** Set an option so a search or substitute ignores case **
  Set the 'ic' (Ignore case) (= ignore upper/lower case when searching) option by entering:
      :set ic
  Set the 'hlsearch' (= highlight all matching phrases) and 
          'incsearch' (= show partial matches for a search phrase) options:  
      :set hls is
  To disable ignoring case enter:  :set noic
NOTE:  If you want to ignore case for just one search command, use  \c
       in the phrase:  /ignore\c  <ENTER>

Lesson 7.1: GETTING HELP 
  ** To use the on-line help system  type   :help <ENTER> 
  Type  CTRL-W CTRL-W   to jump from one window to another.
  ":help" command. 
	:help w
	:help c_CTRL-D
		      
Lesson 7.2: CREATE A STARTUP SCRIPT
  ** Enable Vim features **
  Vim has many more features than Vi, but most of them are disabled by
  default.  To start using more features you have to create a "vimrc" file.
  Start editing the "vimrc" file (the new file).
	:e ~/.vimrc		for Unix
  Read the example "vimrc" file contents:
	:r $VIMRUNTIME/vimrc_example.vim
  For more info type :help vimrc-intro

Lesson 7.3: COMPLETION
  ** Command line completion with CTRL-D and <TAB> **
  Make sure Vim is not in compatible mode:  :set nocp
  Look what files exist in the directory:  :!ls   or  :!dir
  Type the start of a command:  :e
  Press  CTRL-D  and Vim will show a list of commands that start with "e".
  Press <TAB>  and Vim will complete the command name to ":edit".
  Now add a space and the start of an existing file name:  :edit FIL
  Press <TAB>.  Vim will complete the name (if it is unique).
NOTE:  Completion works for many commands.  Just try pressing CTRL-D and
       <TAB>.  It is especially useful for  :help .


New Lesson: OPEN FILE
$ vim {filename} [+NUM | +/{pattern}] [+cmd | -c cmd] [-x]
// NUM - the cursor will be positioned on the line "NUM"
// {pattern} - search pattern
// cmd will be executed after the first file has been read, as Ex command.
// -x - encryption to read (password)

New Lesson: MODES
Vim has 12 modes in total!!!
 - Normal (navigation and text manipulation).
 - Insert mode (for inserting new text)
 - Visual mode (for navigation and manipulation of text selections)
 - Insert Normal mode (in Insert mode, and press CTRL-o,
       after execution of a command return to Insert mode)

New Lesson: COMMANDS
 - :{command}  - Ex command
 - /{pattern}  - Search pattern
 - "d4w" (e.g) - Editing command
 - !{cmd}      - system command
 - Mapped commands - can be we map or bind to some keys

New Lesson: GO TO FILE/LINK
 - gf - go to file under or after cursor
 - gx - go to open links in browser

New Lesson: CLOSING FILE
 - :wq - save currently opened file and exit Vim (even if file is not changed)
 - :x  - exit Vim but write only when changes have been made.
 - ZZ = :x
 - q!  = exit w/o saving
 - qa - exit all open files in current Vim session

New Lesson: SAVING FILE (write the contents of the buffer to the disk) 
 - :w                   - save currently opened file
 - :w <filename>        - save as
 - :w! <filename>       - with overwrite option
 - :sav <filename>      - save current buffer as a new file.
 - :up[date] <filename> - ~ :w but only save when the buffer has been modified.

New Lesson: NAVIGATION
    k
 h    l
    j

 - w or W - go to the start of the next Word;
 - e or E - go to the End of the next Word;
 - b or B - go to the previous (back) word;

 WORD - consists of the sequence of non-blank characters, always delimited be white space.
 WORD - ends at a non-word characters, such as a .,-) ----

 - Ctrl-d = Scroll Down half page;
 - Ctrl-u = Scroll Up half page;
 - Ctrl-f = Scroll down Full page (or forwards);
 - Ctrl-b = Scroll up full page (to backwards);

 - gg     = go to the top of the file;
 - G      = go to the bottom of the file;
 - {      = go to the beginning of current paragraph;
 - }      = go to the end of current paragraph;
 - %      = go to the matching pair of (), [], {}
 - 50%    = go to the line at 50% of the file;
 - :NUM   = go to the line NUM.

 - H      = move cursor to first (highest) line in current window;
 - L      = move cursor to the lowest line in current window;
 - M      = move cursor to the middle of the current window;

New Lesson: FILE MANAGER
  Vim comes with a built-in newrw plugin which is a great way to browse
  files and directories within a Vim session.
  :Ex(plore) <dir> - open <dir> or current directory in current Vim window.
  :Sex <dir> - open dir in horizontal split window.
  :Vex <dir> - open dir in vertical split window.
  :Lex(plore) - open dir in left vertical split.
  (:40vs - vertical split window with width of 40 columns).
  Hit i in netrw to change view types: thin, long, wide and tree.
  When you open a directory with Vim, you actually started netrw.
  In netrw:
   - <Enter> - open file under the cursor;
   - D - delete file under the cursor;
   - R - renames the file under the cursor;
   - X - executes the file under the cursor;
   - % - create a new file in the current directory.

New Lesson: EDITING VIA SSH
  This feature comes with the netrw plugin.
  To archieve this, netrw uses the SSH protocol and manages remote files
  via the scp command.
  $ vim scp://user@myserver[:port]//path/to/file.txt
  Vim uses scp to download the requested file from remote machine to a local /tmp
  and then opens it for editing. When you save changes to the file, the changes
  are first applied to a local copy in /tmp and only after that, the file
  is uploaded via scp to the remote host.
  Beside SSH, there are other protocols supported: sftp, ftp, dav, etc.  

New Lesson: PERSONALIING
  How to configure vim. There are multiple configuration files:
   - .vimrc = main config file, exists in two versions: global and personal
     (personal in home dir). Local file will overrule any previous settings.
     :echo $HOME
   - :set <option> = config current vim session.
     :set number; :set nonumber; set number! (to change on opposite).

New Lesson: COLORING
  Vim supports color schemes.
  :colorscheme <Ctlr-D> 
  (blue, darkblue, default, delek, desert, elflord, evening, industry,
   koehler, morning, murphy, pablo, peachpuff, ron, shine, slate,
   torte, zellner)

New Lesson: CURSOR
  :set cursorline
  :highligh CursorLine guibg=lightblue ctermbg=lightgrey
  :set cursorcolumn

New Lesson: USEFULL OPTIONS
  :set nu[mber]
  :set spell  = enable spell checking
  :set spelllang=en,de,it,rus
  :set spell? - to check options  
  :set nocompatible = rather then Vi setting
  :set backspace=indent,eol,start = allow backspacing over <list>
  :set history=1000 = defalt only 50
  :set showcmd
  :set showmode
  :set autoread = automatically re-read files if unmodified inside Vim
  :set hidden
  :set laststatuS
  :set ruler - cursor position
  :set wildmenu - shoe display menu
  :set tabpagemax=40
  :set relativenumber
  :set noerrorbells
  :set visualbells
  :set mouse=a - enable mouse for scrolling and resizing
  :set background=dark
  :set title
  :set noswapfile
  :set nobackup
  :set nowb
  :set autoindent - new line inherit the indentation of previous lines
  :filetype plugin indent on
  :set tabstop=4 = show existing tab with 4 space width
  :set shiftwidth=2
  :set expandtab =  spaces  instead tab
  :set nowrap = don't wrap lines
  :set incsearch
  :set hlsearch
  :set ignorecase
  :set smartcase
  :set encoding=utf-8
  :set linebreak - wrap lines at convenient points, avoid wrapping in the middle word
  :set scrolloff=3
  :set sidescrolloff=5
  :syntax enable - enable syntax highlighting
  :set confirm - display a comfirmation dialog
  :set nomodeline - ignore file's mode lines
  :set shell = the shell to execute commands
  :set spell

New Lesson: STATUS LINE
  It is the bar along the bottom.
  The purpose of status line is to give you various information
  about the status of the current buffer.
  (default status line includes: info file path, permissions,
   line numbers and a percentage numbery of where you are in the file).
  Status line, by default, is shown only if you have more than one buffer open.
  "show status line - comment in .vimrc
  :set laststatus=2
  :set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)
  g+CTRL-g = detailed information about the number of line, words, char and etc.
 
New Lesson: SWAP/BACKUP
  .filename.swp in your location.
  Swap files store changes you've made to the buffer.
  After crashes a swap file will allow you to recover changes.
  And also it uses as lock mechanism - warning.
  ":set noswapfile
  :!mkdir ~/.vim/swp
  :set directory=$HOME/.vim/swp//

New Lesson: PROJECT SPECIFIC .vimrc
  " enable project specific vimrc
  :set exrc
  .vimrc in the root of your project folder!
     
 
