Pro git book, 2ed
-----------------

What is "version control", and why should you care?
Version control is a system that records changes to a file or set of files over
time so that you can recall specific versions later.

-- Local version control ---

checkout    version database
--------    ----------------
 file ------- version 3
                 |
              version 2
                 |
              version 1


The next major issue that people encounter is that they need to collaborate with
developers on other systems. To deal with this problem, Centralized Version Systems
were developed. Such as CVS, Subversion, Perforce, have a single server that
contains all the versioned files, and a number of clients that check out files from
that central place.

Distributed Version Systems. Such as Git, Mercurial, Bazzar, Darcs.
Every checkout is really a full backup of all the data.


History of Git
--------------
The Linux kernel is an open source software project of fairly large scope.
From (1991-2002) all changes to the software were passed around as patches and
archived files. In 2002, the Linux kernel project began using a proprietary
distributed VCS called BitKepper. But in 2005, the relashionship between the
community that developed the Linux kernel and the commercial company that
developed BitKeeper broke down.


As you learn Git, try to clear your mind of the things you may know about other
VCSs, such as Subversion and Perforce; doing so will help you avoid subtle confusion
when using the tool.


Snapshots, not differences
--------------------------
The major difference between Git and any other VCS is the way Git thinks about
its data. Conceptually, most other systems store information as a list of file-based changes.
These systems think of the information they keep as a set of files and the
changes made to each file over time.


Version 1    Version 2   Version 3   Version 4

fileA --------delta1-------------------delta2
fileB --------------------delta1
fileC --------delta1------delta2-------delta3

Git doesn't think of or store its data this way.
Instead, Git thinks of its data more like a set of snapshots of a miniature filesystem.
Every time you commit, or save the state of your project in Git, it basically
takes a picture of what all your files look like at that moment and stores
a reference to that snapshots.

Version 1    Version 2   Version 3   Version 4

fileA ----------A1----------A1--------A2
fileB ----------B-----------B---------B1
fileC ----------C1----------C1--------C1

Git has integrity. Everything in Git is check summed before it is stored and
is then reffered to by that checksum. SHA-1 hash. This is a 40 character string
composed of hexadecimal characters (0-9 and a-f) and calculated based on the
contents of a file or directory structure in Git.

Main thing to remember about Git if you want the rest of your learning process
to go smoothly. Git has three main states that your files can reside in:
- committed;
- modified;
- staged.

Committed means that the data is safety stored in your local database.
Modified means that you have changed the file but have not committed it to your database yet.
Staged means that you have marked a modified file in its current version to go into
your next commit snapshot.






