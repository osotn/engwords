4.3 The stream editor sed
Let us now turn to sed. Since it is derived directly from ed, it should be
easy to learn, and it will consolidate your knowledge of ed.
The basic idea of sed is simple:
$ sed 'list of ed commands' filenarnes ...
reads lines one at a time from the input files; it applies the commands from the
list, in order, to each line and writes its edited form on the standard output.
So, for instance, you can change UNIX to UNIX (TM) everywhere it occurs in a
set of files with
$ sed ' s/UNIX/UNIX (TM) /g' filenames... >output
Do not misinterpret what happens here. sed does not alter the contents of
its input files. It writes on the standard output, so the original files are not
changed. By now you have enough shell experience to realize that
$ sed '...' file >file
is a bad idea: to replace the contents of files, you must use a temporary file, or
another program. (We will talk later about a program to encapsulate the idea
of overwriting an existing file; look at overwr i te in Chapter 5.)
sed outputs each line automatically, so no p was needed after the substitution command above; indeed, if there had been one, each modified line would
have been printed twice. Quotes are almost always necessary, however, since
so many sed metacharacters mean something to the shell as well. For example, consider using du -a to generate a list of filenames. Normally, du prints
the size and the filename:
$ du -a
18
13
14
17
2
$
ch4.*
ch4.1
ch4.2
ch4.3
ch4.4
ch4.9
You can use sed to discard the SIze part, but the editing cornmand needs
quotes to protect a * arid a tab from being interpreted by the shell:
$ du -a ch4.* f sed 's/.*//'
ch4.1
ch4.2
ch4.3
ch4.4
ch4.9
$
The substitution deletes all characters (. *) up to and including the rightmost
tab (shown in the pattern as ....).
In a similar way, you could select the user names and login times from the
output of who:
$ who
lr tty1
ron tty3
you tty4
td tty5
$ who : sed 's/
lr 07: 14
ron 10:31
you 08:36
td 08:47
$
Sep 29 07:14
Sep 29 10:31
Sep 29 08:36
Sep 29 08:47
.* / /'
The s command replaces a blank and everything that follows it (as much as
possible, including more blanks) up to another blank by a single blank. Again,
quotes are needed.
Almost the same sed command can be used to make a program getname
that will return your user name:
$ cat getname
who am i : sed 'sl .*11'
$ getname
you
$
Another sed sequence is used so frequently that we have made it into a
shell file called indo The ind command indents its input one tab stop; it is
handy for moving something over to fit better onto line-printer paper.
The implementation of ind is easy - stick a tab at the front of each line:
sed 's/"I...I' $*
Version 1 of i nd
This version even puts a tab on each empty line, which seems unnecessary. A
better version uses sed's ability to select the lines to be modified. If you prefix a pattern to the command, only the lines that match the pattern will be
affected:
sed '/./S/A//' $*
Version 2 of ind
The pattern /. / matches any line that has at least one character on it other
than a newline; the s command is done for those lines but not for empty lines.
Remember that sed outputs all lines regardless of whether they were changed,
so the empty lines are still produced as they should be.
There's yet another way that ind could be written. It is possible to do the
commands only on lines that don't match the selection pattern, by preceding
the command with an exclamation mark 'I '. In
sed '/A$/!S/A//' $*
Version 3 of ind
the pattern /" $/ matches empty lines (the end of the line immediately follows
the beginning), so /" $ / I says, "don't do the command on empty lines."
As we said above, sed prints each line automatically, regardless of what
was done to it (unless it was deleted). Furthermore, most ed commands can
be used. So it's easy to write a sed program that will print the first three
(say) lines of its input, then quit:
sed 3q
Although 3q is not a legal ed command, it makes sense in sed: copy lines,
then quit after the third one.
You might want to do other processing to the data, such as indent it. One
way is to run the output from sed through ind, but since sed accepts multiple commands, it can be done with a single (somewhat unlikely) invocation of
sed:
sed 'S/A//
3q'
Notice where the quotes and the newline are: the commands have to be on
separate lines, but sed ignores leading blanks and tabs.
With these ideas, it might seem sensible to write a program, called head,
to print the first few lines of each filename argument. But sed 3q (or 10q) is
so easy to type that we've never felt the need. We do, however, have an ind,
since its equivalent sed command is harder to type. (In the process of writing
this book we replaced the existing 30-line C program by version 2 of the oneline implementations shown earlier). There is no clear criterion for when it's
worth making a separate command from a complicated command line; the best
rule we've found is to put it in your bin and see if you actually use it.
It's also possible to put sed commands in a file and execute them from
there, with
$ sed -f cmdfile ...
Y ou can use line selectors other than numbers like 3:
$ sed ' /pattern/ q ,
prints its input up to and including the first line matching pattern, and
$ sed ' /pattern/d'
deletes every line that contains pattern; the deletion happens before the line is
automatically printed, so deleted lines are discarded.
Although automatic printing is usually convenient, sometimes it gets in the
way. It can be turned off by the -n option; in that case, only lines explicitly
printed with a p command appear in the output. For example,
$ sed -n ' /pattern/p ,
does what grep does. Since the matching condition can be inverted by following it with !,
$ sed -n ' /pattern/! p'
is grep -v. (So is sed' /pattern/d' .)
Why do we have both sed and grep? After all, grep is just a simple special case of sed. Part of the reason is history - grep came well before sed.
But grep survives, and indeed thrives, because for the particular job that they
both do, it is significantly easier to use than sed is: it does the common case
about as succinctly as possible. (It also does a few things that sed won't; look
at the -b option, for instance.) Programs do die, however. There was once a
program called gres that did simple substitution, but it expired almost
immediately when sed was born.
Newlines can be inserted with sed, using the same syntax as in ed:
$ sed 's/$/\
> /'
adds a newline to the end of each line, thus double-spacing its input, and
$ sed 's/[ ][ ]*/\
> /g'
replaces each string of blanks or tabs with a newline and thus splits its input
into one word per line. (The regular expression '[ ....]' matches a blank or
tab; '[ ....] *' matches zero or more of these, so the whole pattern matches one
or more blanks and/or tabs.)
You can also use pairs of regular expressions or line numbers to select a
range of lines over which anyone of the commands will operate.
$ sed '$d'
Print only lines 20 through 30
Delete lines 1 through 10 (== ta i 1 + 11)
Delete up to and including first blank line
Print each group of lines from
an empty line to line starting with end
Delete last line
$ sed -n '20,30p'
$ sed '1,10d'
$ sed ' 1 , /A $/d'
$ sed -n '/A$/,/Aend/p'
Line numbers go from the beginning of the input; they do not reset at the
beginning of a new file.
There is a fundamental limitation of sed that is not shared by ed, however:
relative line numbers are not supported. In particular, + and - are not understood in line number expressions, so it is impossible to reach backwards in the
input:
$ sed '$-1d'
Unrecognized command: $-1d
$
Illegal: can't refer backward
Once a line is read, the previous line is gone forever: there is no way to identify the next-to-Iast line, which is what this command requires. (In fairness,
there is a way to handle this with sed, but it is pretty advanced. Look up the
"hold" command in the manual.) There is also no way to do relative addressing forward:
$ sed '/thing/+1d'
Illegal: can't refer forward
sed provides the ability to write on multiple output files. For example,
$ sed -n ' /pat/w file 1
> /pat/! w file2' filenames...
$
writes lines matching pat on file 1 and lines not matching pat on f i le2. Or,
to revisit our first example,
$ sed 's/UNIX/UNIX(TM)/gw Ue out' filenames ... >output
writes the entire output to file output as before, but also writes just the
changed lines to file u. out.
Sometimes it's necessary to cooperate with the shell to get shell file arguments into the middle of a sed command. One example is the program
newer, which lists all files in a directory that are newer than a specified one.
$ cat newer
# newer f: list files newer than f
Is -t : sed ,/A'$1'$/q'
$
The quotes protect the various special characters aimed at sed, while leaving
the $ 1 exposed so the shell will replace it by the filename. An alternate way
to write the argument is
Table 4.2: Summary of sed Commands
append lines to output until one not ending in \
branch to command : label
change lines to following text as in a
delete line; read next input line
insert following text before next output
list line, making all non-printing characters visible
print line
quit
read file, copy contents to output
substitute new for old. If f g, replace all occurrences;
f p, print; f w file, write to file
test: branch to label if substitution made to current line
write line to file
replace each character from str 1 with corresponding
character from str2 (no ranges allowed)
print current input line number
do sed cmd only if line is not selected
set label for band t commands
treat commands up to matching } as a group
"/""$1\$/q"
since the $ 1 will be replaced by the argument while the \ $ becomes just $.
In the same way, we can write older, which lists all the files older than
the named one:
$ cat older
# older f: list files older than f
Is -tr : sed '/""'$1'$/q'
$
The only difference is the - r option on 1 s, to reverse the order.
Although sed will do much more than we have illustrated, including testing
conditions, looping and branching, remembering previous lines, and of course
many of the ed commands described in Appendix 1, most of the use of sed is
similar to what we have shown here - one or two simple editing commands -
rather than long or complicated sequences. Table 4.2 summarizes some of
sed's capabilities, although it omits the multi-line functions.
sed is convenient because it win handle arbitrarily long inputs, because it is
fast, and because it is so similar to ed with its regular expressions and line-at-
a-time processing. On the other side of the coin, however, sed provides a
relatively limited form of memory (it's hard to remember text from one line to
another), it only makes one pass over the data, it's not possible to go backwards, there's no way to do forward references like /... / + 1, and it provides
no facilities for manipulating numbers - it is purely a text editor.
Exercise 4-5. Modify older and newer so they don't include the argument file in
their output. Change them so the files are listed in the opposite order. 0
Exercise 4-6. Use sed to make bundle robust. Hint: in here documents, the end-marking word is recognized only when it matches the line exactly.

