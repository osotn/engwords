2,,5 Inodes
A file has several components: a name, contents, and administrative information such as permissions and modification times. The administrative information is stored in the inode (over the years, the hyphen fen out of "i-node"),
along with essential system data such as how long it is, where on the disc the
contents of the file are stored, and so on.
There are three times in the inode: the time that the contents of the file
were last modified (written); the time that the file was last used (read or executed); and the time that the inode itself was last changed, for example to set
the permissions.
$ date
Tue Sep 27 12:07:24 EDT 1983
$ date >junk
$ Is -1 junk
-rw-rw-rw- 1 you 29 Sep 27 12:07 junk
$ Is -lu junk
-rw-rw-rw- 1 you 29 Sep 27 06:11 junk
$ Is -lc junk
-rw-rw-rw- 1 you 29 Sep 27 12:07 junk
$
Changing the contents of a file does not affect its usage time, as reported by
Is -lu, and changing the permissions affects only the inode change time, as
reported by Is -lc.
$ chmod 444 junk
$ Is -lu junk
-r--r--r-- 1 you
$ Is -lc junk
-r--r--r-- 1 you
$ chmod 666 junk
$
29 Sep 27 06:11 junk
29 Sep 27 12:11 junk
The -t option to 1s, which sorts the files according to time, by default that
of last modification, can be combined with - c or -u to report the order in
which inodes were changed or files were read:
$ Is recipes
cookie
pie
$ Is -lut
total 2
drwxrwxrwx 4 you
-rw-rw-rw- 1 you
$
64 Sep 27 12:11 recipes
29 Sep 27 06:11 junk
recipes is most recently used, because we just looked at its contents.
It is important to understand inodes, not only to appreciate the options on
Is, but because in a strong sense the inodes are the files. All the directory
hierarchy does is provide convenient names for files. The system's internal
name for a file is its i-number: the number of the inode holding the file's information. Is -i reports the i-number in decimal:
$ date >x
$ Is -i
15768 junk
15274 recipes
15852 x
$
It is the i-number that is stored in the first two bytes of a directory, before the
name. cd -d will dump the data in decimal by byte pairs rather than octal by
bytes and thus make the i-number visible.
$ od -c .
0000000 4 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0
0000020 273 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0
0000040 252 r e c i p e s \0 \0 \0 \0 \0 \0 \0
0000060 230 = j u n k \0 \0 \0 \0 \0 \0 \0 \0 \0 \0
0000100 354 = x \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0 \0
0000120
$ od -d .
0000000 15156 00046 00000 00000 00000 00000 00000 00000
0000020 10427 11822 00000 00000 00000 00000 00000 00000
0000040 15274 25970 26979 25968 00115 00000 00000 00000
0000060 15768 30058 27502 00000 00000 00000 00000 00000
0000100 15852 00120 00000 00000 00000 00000 00000 00000
0000120
$
The first two bytes in each directory entry are the only connection between the
name of a file and its contents. A filename in a directory is therefore called a
link, because it links a name in the directory hierarchy to the inode, and hence
to the data. The same i-number can appear in more than one directory. The
rm command does not actually remove inodes; it removes directory entries or
links. Only when the last link to a file disappears does the system remove the
inode, and hence the file itself.
If the i-number in a directory entry is zero, it means that the link has been
removed, but not necessarily the contents of the file - there may still be a link
somewhere else. You can verify that the i-number goes to zero by removing
the file:
$ rm x
$ od -d .
0000000 15156 00046 00000 00000 00000 00000 00000 00000
0000020 10427 11822 00000 00000 00000 00000 00000 00000
0000040 15274 25970 26979 25968 00115 00000 00000 00000
0000060 15768 30058 27502 00000 00000 00000 00000 00000
0000100 00000 00120 00000 00000 00000 00000 00000 00000
0000120
$
The next file created in this directory will go into the unused slot, although it
will probably have a different i-number.
The In command makes a link to an existing file, with the syntax
$ In old-file new-file
The purpose of a link is to give two names to the same file, often so it can
appear in two different directories. On many systems there is a link to
/bin/ed called /bin/e, so that people can call the editor e. Two links to a
file point to the same inode, and hence have the same i-number:
$ 1n junk 1inktojunk
$ 1s -1i
total 3
15768 -rw-rw-rw- 2 you
15768 -rw-rw-rw- 2 you
15274 drwxrwxrwx 4 you
$
29 Sep 27 12:07 junk
29 Sep 27 12:07 linktojunk
64 Sep 27 09:34 recipes
The integer printed between the permissions and the owner is the number of
links to the file. Because each link just points to the inode, each link is equally
important - there is no difference between the first link and subsequent ones.
(Notice that the total disc space computed by Is is wrong because of double
counting.)
When you change a file, access to the file by any of its names will reveal
the changes, since all the links point to the same file.
$ echo x >junk
$ 1s -1
total 3
-rw-rw-rw- 2 you 2 Sep 27 12:37 junk
-rw-rw-rw- 2 you 2 Sep 27 12:37 linktojunk
drwxrwxrwx 4 you 64 Sep 27 09:34 recipes
$ rrn 1inktojunk
$ 1s -1
total 2
-rw-rw-rw- 1 you 2 Sep 27 12:37 junk
drwxrwxrwx 4 you 64 Sep 27 09:34 recipes
$
After linktojunk is removed the link count goes back to one. As we said
before, rm'ing a file just breaks a link; the file remains until the last link is
removed. In practice, of course, most files only have one link, but again we
see a simple idea providing great flexibility.
A word to the hasty: once the last link to a file is gone, the data is irretrievable. Deleted files go into the incinerator, rather than the waste basket, and
there is no way to call them back from the ashes. (There is a faint hope of
resurrection. Most large UNIX systems have a formal backup procedure that
periodically copies changed files to some safe place like magnetic tape, from
which they can be retrieved. For your own protection and peace of mind, you
should know just how much backup is provided on your system. If there is
none, watch out - some mishap to the discs could be a catastrophe.)
Links to files are handy when two people wish to share a file, but sometimes you really want a separate copy - a different file with the same information. You might copy a document before making extensive changes to it,
for example, so you can restore the original if you decide you don't like the
changes. Making a link wouldn't help, because when the data changed, both
links would reflect the change. cp makes copies of files:
$ cp junk copyofjunk
$ 1s -1i
total 3
15850 -rw-rw-rw- 1 you
15768 -rw-rw-rw- 1 you
15274 drwxrwxrwx 4 you
$
2 Sep 27 13:13 copyofjunk
2 Sep 27 12:37 junk
64 Sep 27 09:34 recipes
The i-numbers of junk and copyof junk are different, because they are different files, even though they currently have the same contents. It's often a
good idea to change the permissions on a backup copy so it's harder to remove
it accidentally.
$ chmod -w copyofjunk Turn off write permission
$ 1s -1i
total 3
15850 -r--r--r-- 1 you 2 Sep 27 13:13 copyofjunk
15768 -rw-rw-rw- 1 you 2 Sep 27 12:37 junk
15274 drwxrwxrwx 4 you 64 Sep 27 09:34 recipes
$ rm copyofjunk
rm: copyofjunk 444 mode n No! It's precious
$ date >junk
$ 1s -1i
total 3
15850 -r--r--r-- 1 you 2 Sep 27 13: 13 copyofjunk
15768 -rw-rw-rw- 1 you 29 Sep 27 13:16 junk
15274 drwxrwxrwx 4 you 64 Sep 27 09:34 recipes
$ rm copyofjunk
rm: copyofjunk 444 mode y Well, maybe not so precious
$ 1s -1i
total 2
15768 -rw-rw-rw- 1 you 29 Sep 27 13:16 junk
15274 drwxrwxrwx 4 you 64 Sep 27 09:34 recipes
$
Changing the copy of a file doesn't change the original, and removing the copy
has no effect on the original. Notice that because copyof junk had write permission turned off, rm asked for confirmation before removing the file.
There is one more common command for manipulating files: mv moves or
renames files, simply by rearranging the links. Its syntax is the same as cp
and In:
$ rnv junk sarneo1djunk
$ 1s -1i
total 2
15274 drwxrwxrwx 4 you
15768 -rw-rw-rw- 1 you
$
64 Sep 27 09:34 recipes
29 Sep 27 13:16 sameoldjunk
sameoldjunk is the same file as our old junk, right down to the i-number
only its name - the directory entry associated with inode 15768 - has been
changed.
We have been doing all this file shuffling in one directory, but it also works
across directories. In is often used to put links with the same name in several
directories, such as when several people are working on one program or document. mv can move a file or directory from one directory to another. In fact,
these are common enough idioms that mv and cp have special syntax for them:
$ rnv (or cp) filel file2 ... directory
moves (or copies) one or more files to the directory which is the last argument.
The links or copies are made with the same filenames. For example, if you
wanted to try your hand at beefing up the editor, you might begin by saying
$ cp /usr/src/crnd/ed.c .
to get your own copy of the source to play with. If you were going to work on
the shell, which is in a number of different source files, you would say
$ rnkdir sh
$ cp /usr/src/crnd/sh/* sh
and cp would duplicate all of the shell's source files in your subdirectory sh
(assuming no subdirectory structure in /usr/src/cmd/sh - cp is not very
clever). On some systems, In also accepts multiple file arguments, again with
a directory as the last argument. And on some systems, mv, cp and In are
themselves links to a single file that examines its name to see what service to
perform.
Exercise 2-6. Why does Is -1 report 4 links to recipes? Hint: try
$ ls -ld /usr/you
Why is this useful information? 0
Exercise 2-7. What is the difference between
$ mv junk junk1
and
$ cp junk junk1
$ rm junk
Hint: make a link to junk, then try it.
Exercise 2-8. cp doesn't copy subdirectories, it just copies files at the first level of a
hierarchy. What does it do if one of the argument files is a directory? Is this kind or
even sensible? Discuss the relative merits of three possibilities: an option to cp to descend directories, a separate command rcp (recursive copy) to do the job, or just having
cp copy a directory recursively when it finds one. See Chapter 7 for help on providing
this facility. What other programs would profit from the ability to traverse the directory
tree?
