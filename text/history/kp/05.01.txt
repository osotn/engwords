ustomizing the cal command
One common use of a shell program is to enhance or to modify the user
interface to a program. As an example of a program that could stand enhancement, consider the cal( 1) command:
$ cal
usage: cal [month] year Good so far
$ cal october 1983
Bad argument Not so good
$ cal 10 1983
October 1983
5 M Tu W Th F 5
1
2 3 4 5 6 7 8
9 10 11 12 13 14 15
16 17 18 19 20 21 22
23 24 25 26 27 28 29
30 31
$
It's a nuisance that the month has to be provided numerically. And, as it turns
out, cal 10 prints out the calendar for the entire year 10, rather than for the
current October, so you must always specify the year to get a calendar for a
single month.
The important point here is that no matter what interface the cal command
provides, you can change it without changing cal itself. You can place a command in your private bin directory that converts a more convenient argument
syntax into whatever the real cal requires. You can even call your version
cal, which means one less thing for you to remember.
The first issue is design: what should cal do? Basically, we want cal to
be reasonable. It should recognize a month by name. With two arguments, it
should behave just as the old cal does, except for converting month names
into numbers. Given one argument, it should print the month or year's calendar as appropriate, and given zero arguments, it should print the current
month's calendar, since that is certainly the most common use of a cal command. So the problem is to decide how many arguments there are, then map
them to what the standard cal wants.
The shell provides a case statement that is well suited for making such
decisions:
case word in
pattern) commands, ,
pattern) commands, ,
esac
The case statement compares word to the patterns from top to bottom, and
performs the commands associated with the first, and only the first, pattern
that matches. The patterns are written using the shell's pattern matching rules,
slightly generalized from what is available for filename matching. Each action
is terminated by the double semicolon ;;. (The ;; may be left off the last
case but we often leave it in for easy editing.)
Our version of cal decides how many arguments are present, processes
alphabetic month names, then calls the real cal. The shell variable $# holds
the number of arguments that a shell file was called with; other special shell
variables are listed in Table 5.1.
$ cat cal
# cal: nicer interface to /usr/bin/cal
case $# in
0) set 'date'; m=$2; y=$6 "
1) m=$1; set 'date'; y=$6 "
*) m=$1; y=$2 ;;
esac
# no args: use today
# 1 arg: use this year
# 2 args: month and year
case $m in
jan* Jan*) m=1 , ,
feb* Feb*) m=2 , ,
mar* Mar*) m=3 , ,
apr* Apr*) m=4 , ,
may* May*) m=5 , ,
jun* Jun * ) m=6 , ,
jul* Jul*) m=7 , .,
aug*IAug*) m=8 , ,
sep*:Sep*) m=9 , ,
oct*:Oct*) m=10 , ,
nov*INov*) m=11 , .,
dec*:Dec*) m=12 , ,
[1-9]:10:11:12) , , # numeric month
* ) y=$m; m=uuuu , , # plain year
esac
/usr/bin/cal $m $y
$
# run the real one
The first case checks the number of arguments, $#, and chooses the appropriate action. The final "* pattern in the first case is a catch-all: if the nUITlber of
arguments is neither 0 nor 1, the last case will be executed. (Since patterns are
scanned in order, the catch -all must be last.) This sets m and y to the month
and year - given two arguments, our cal is going to act the same as the original.
The first case statement has a couple of tricky lines containing
set 'date'
Although not obvious from appearance, it IS easy to see what this statement
does by trying it:
Table 5e1: Shell Built-in Variables
the number of arguments
all arguments to shell
similar to $ *; see Section 5.7
options supplied to the shell
return value of the last command executed
process-id of the shell
process-id of the last command started with &.
default argument for cd command
list of characters that separate words in arguments
file that, when changed, triggers "you have mail " message
list of directories to search for commands
prompt string, default '$ ,
prompt string for continued command line, default '> '
$ date
Sat Oct 1 06:05:18 EDT 1983
$ set 'date'
$ echo $1
Sat
$ echo $4
06:05:20
$
set IS a shell built-in command that does too many things. With no arguments, it shows the values of variables in the environment, as we saw in
Chapter 3. Ordinary arguments reset the values of $1, $ 2, and so on. So
set  date  sets $1 to the day of the week, $2 to the name of the month,
and so on. The first case in cal, therefore, sets the month and year from
the current date if there are no arguments; if there's one argument, it's used as
the month and the year is taken from the current date.
aet also recognizes several options, of which the most often used are -v
and -x; they turn on echoing of commands as they are being processed by the
shell. These are indispensable for debugging complicated shell programs.
The remaining problem is to convert the month, if it is in textual form, into
a number. This is done by the second case statement, which should be
largely self-explanatory. The only twist is that the ; character in case statement patterns, as in egrep, indicates an alternative: big I small matches
either big or small. Of course, these cases could also be written as
[ jJ] an* and so on. The program accepts month naines either in all lower
case, because most commands accept lower case input, or with first letter capitalized, because that is the format printed by date. The rules for shell pattern
matching are given in Table 5.2.
Table 5.2: Shell Pattern Matching Rules
match any string, including the null string
match any single character
match any of the characters in ccc.
[a-dO-3] is equivalent to [abcd0123]
match... exactly; quotes protect special characters. Also '
match c literally
in case expressions only, matches either a or b
in filenames, matched only by an explicit / in the expression;
in case, matched like any other character
as the first character of a filename, is matched only by an
explicit .. in the expression
The last two cases in the second case statement deal with a single argument that could be a year; recall that the first case statement assumed it was
a month. If it is a number that could be a month, it is left alone. Otherwise,
it is assumed to be a year.
Finally, the last line calls /usr /bin/ cal (the real cal) with the converted arguments. Our version of cal works as a newcomer might expect:
$ date
Sat Oct 1 06:09:55 EDT 1983
$ cal
October 1983
S M Tu W Th F S
1
2 3 4 5 6 7 8
9 10 11 12 13 14 15
16 17 18 19 20 21 22
23 24 25 26 27 28 29
30 31
$ cal dec
December 1983
S M Tu W Th F S
1 2 3
4 5 6 7 8 9 10
11 12 13 14 15 16 17
18 19 20 21 22 23 24
25 26 27 28 29 30 31
$
And cal 1984 prints out the calendar for all of 1984.
Our enhanced cal program does the same job as the original, but in a
simpler, easier-to-remember way. We therefore chose to call it cal, rather
than calendar (which is already a command) or something less mnemonic
like ncal. Leaving the name alone also has the advantage that users don?t
have to develop a new set of reflexes for printing a calendar.
Before we leave the case statement, it's worth a brief comment on why the
shell's pattern matching rules are different from those in ed and its derivatives. After all, two kinds of patterns means two sets of rules to learn and two
pieces of code to process them. Some of the differences are simply bad choices
that were never fixed - for example, there is no reason except compatibility
with a past now lost that ed uses '.' and the shell uses '7' for "match any
character." But sometimes the patterns do different jobs. Regular expressions
in the editor search for a string that can occur anywhere in a line; the special
characters A and $ are needed to anchor the search to the beginning and end
of the line. For filenames, however, we want the search anchored by default,
since that is the most common case; having to write something like
$ Is A?*.C$
Doesn't work this way
instead of
$ Is *.c
would be a great nuisance.
Exercise 5-1. If users prefer your version of cal, how do you make it globally accessible? What has to be done to put it in /usr/bin? 0
Exercise 5-2. Is it worth fixing cal so cal 83 prints the calendar for 1983? If so,
how would you print the calendar for year 83? 0
Exercise 5-3. Modify cal to accept more than one month, as in
$ cal oct nov
or perhaps a range of months:
$ cal oct - dec
If it's now December, and you ask for cal jan, should you get this year's January or
next year's? When should you have stopped adding features to cal?

