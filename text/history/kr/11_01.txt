B.1 Input and Output: <stdio.h>
The input and output functions, types, and macros defined in <stdio.h> represent nearly one
third of the library.
A stream is a source or destination of data that may be associated with a disk or other
peripheral. The library supports text streams and binary streams, although on some systems,
notably UNIX, these are identical. A text stream is a sequence of lines; each line has zero or
more characters and is terminated by '\n' . An environment may need to convert a text stream
to or from some other representation (such as mapping '\n' to carriage return and linefeed).
A binary stream is a sequence of unprocessed bytes that record internal data, with the property
that if it is written, then read back on the same system, it will compare equal.
A stream is connected to a file or device by opening it; the connection is broken by closing the
stream. Opening a file returns a pointer to an object of type FILE , which records whatever
information is necessary to control the stream. We will use ``file pointer'' and ``stream''
interchangeably when there is no ambiguity.
When a program begins execution, the three streams stdin , stdout , and stderr are already
open.
B.1.1 File Operations
The following functions deal with operations on files. The type size_t is the unsigned integral
type produced by the sizeof operator.
FILE *fopen(const char *filename, const char *mode)
fopen opens the named file, and returns a stream, or NULL if the attempt fails. Legal
values for mode include:
"r" open text file for reading
"w" create text file for writing; discard previous contents if any
"a" append; open or create text file for writing at end of file201
"r+" open text file for update (i.e., reading and writing)
"w+" create text file for update, discard previous contents if any
"a+" append; open or create text file for update, writing at end
Update mode permits reading and writing the same file; fflush or a file-positioning
function must be called between a read and a write or vice versa. If the mode includes b
after the initial letter, as in "rb" or "w+b" , that indicates a binary file. Filenames are
limited to FILENAME_MAX characters. At most FOPEN_MAX files may be open at once.
FILE *freopen(const char *filename, const char *mode, FILE *stream)
freopen opens the file with the specified mode and associates the stream with it. It
returns stream , or NULL if an error occurs. freopen is normally used to change the
files associated with stdin , stdout , or stderr .
int fflush(FILE *stream)
On an output stream, fflush causes any buffered but unwritten data to be written; on
an input stream, the effect is undefined. It returns EOF for a write error, and zero
otherwise. fflush(NULL) flushes all output streams.
int fclose(FILE *stream)
fclose flushes any unwritten data for stream , discards any unread buffered input,
frees any automatically allocated buffer, then closes the stream. It returns EOF if any
errors occurred, and zero otherwise.
int remove(const char *filename)
remove removes the named file, so that a subsequent attempt to open it will fail. It
returns non-zero if the attempt fails.
int rename(const char *oldname, const char *newname)
rename changes the name of a file; it returns non-zero if the attempt fails.
FILE *tmpfile(void)
tmpfile creates a temporary file of mode "wb+" that will be automatically removed
when closed or when the program terminates normally. tmpfile returns a stream, or
NULL if it could not create the file.
char *tmpnam(char s[L_tmpnam])
tmpnam(NULL) creates a string that is not the name of an existing file, and returns a
pointer to an internal static array. tmpnam(s) stores the string in s as well as returning
it as the function value; s must have room for at least L_tmpnam characters. tmpnam
generates a different name each time it is called; at most TMP_MAX different names are
guaranteed during execution of the program. Note that tmpnam creates a name, not a
file.
int setvbuf(FILE *stream, char *buf, int mode, size_t size)
setvbuf controls buffering for the stream; it must be called before reading, writing or
any other operation. A mode of _IOFBF causes full buffering, _IOLBF line buffering of
text files, and _IONBF no buffering. If buf is not NULL , it will be used as the buffer,
otherwise a buffer will be allocated. size determines the buffer size. setvbuf returns
non-zero for any error.
void setbuf(FILE *stream, char *buf)
If buf is NULL , buffering is turned off for the stream. Otherwise, setbuf is equivalent
to (void) setvbuf(stream, buf, _IOFBF, BUFSIZ) .
B.1.2 Formatted Output
The printf functions provide formatted output conversion.
int fprintf(FILE *stream, const char *format, ...)
fprintf converts and writes output to stream under the control of format . The return value
is the number of characters written, or negative if an error occurred.
The format string contains two types of objects: ordinary characters, which are copied to the
output stream, and conversion specifications, each of which causes conversion and printing of202
the next successive argument to fprintf . Each conversion specification begins with the
character % and ends with a conversion character. Between the % and the conversion character
there may be, in order:
•
Flags (in any order), which modify the specification:
o - , which specifies left adjustment of the converted argument in its field.
o + , which specifies that the number will always be printed with a sign.
o space: if the first character is not a sign, a space will be prefixed.
o 0 : for numeric conversions, specifies padding to the field width with leading
zeros.
o
# , which specifies an alternate output form. For o , the first digit will become
zero. For x or X , 0x or 0X will be prefixed to a non-zero result. For e , E , f , g ,
and G , the output will always have a decimal point; for g and G , trailing zeros
will not be removed.
• A number specifying a minimum field width. The converted argument will be printed in
a field at least this wide, and wider if necessary. If the converted argument has fewer
characters than the field width it will be padded on the left (or right, if left adjustment
has been requested) to make up the field width. The padding character is normally
space, but is 0 if the zero padding flag is present.
• A period, which separates the field width from the precision.
• A number, the precision, that specifies the maximum number of characters to be printed
from a string, or the number of digits to be printed after the decimal point for e , E , or f
conversions, or the number of significant digits for g or G conversion, or the number of
digits to be printed for an integer (leading 0 s will be added to make up the necessary
width).
• A length modifier h , l (letter ell), or L . `` h '' indicates that the corresponding argument
is to be printed as a short or unsigned short ; `` l '' indicates that the argument is a
long or unsigned long , `` L '' indicates that the argument is a long double .
Width or precision or both may be specified as * , in which case the value is computed by
converting the next argument(s), which must be int .
The conversion characters and their meanings are shown in Table B.1. If the character after the
% is not a conversion character, the behavior is undefined.
Table B.1 Printf Conversions
Character
d,i
o
x,X
u
c
s
Argument type; Printed As
int ; signed decimal notation.
int ; unsigned octal notation (without a leading zero).
unsigned int ; unsigned hexadecimal notation (without a leading 0x or 0X ),
using abcdef for 0x or ABCDEF for 0X .
int ; unsigned decimal notation.
int ; single character, after conversion to unsigned char
char * ; characters from the string are printed until a '\0' is reached or until the
number of characters indicated by the precision have been printed.203
double ; decimal notation of the form [-] mmm.ddd, where the number of d's is
f
e,E
g,G
p
n
%
given by the precision. The default precision is 6; a precision of 0 suppresses the
decimal point.
double ; decimal notation of the form [-] m.dddddd e+/- xx or [-] m.dddddd E+/-
xx, where the number of d's is specified by the precision. The default precision is
6; a precision of 0 suppresses the decimal point.
double ; %e or %E is used if the exponent is less than -4 or greater than or equal to
the precision; otherwise %f is used. Trailing zeros and a trailing decimal point are
not printed.
void * ; print as a pointer (implementation-dependent representation).
int * ; the number of characters written so far by this call to printf is written
into the argument. No argument is converted.
no argument is converted; print a %
int printf(const char *format, ...)
printf(...) is equivalent to fprintf(stdout, ...) .
int sprintf(char *s, const char *format, ...)
sprintf is the same as printf except that the output is written into the string s ,
terminated with '\0' . s must be big enough to hold the result. The return count does
not include the '\0' .
int vprintf(const char *format, va_list arg)
int vfprintf(FILE *stream, const char *format, va_list arg)
int vsprintf(char *s, const char *format, va_list arg)
The functions vprintf , vfprintf , and vsprintf are equivalent to the corresponding
printf functions, except that the variable argument list is replaced by arg , which has
been initialized by the va_start macro and perhaps va_arg calls. See the discussion of
<stdarg.h> in Section B.7.
B.1.3 Formatted Input
The scanf function deals with formatted input conversion.
int fscanf(FILE *stream, const char *format, ...)
fscanf reads from stream under control of format , and assigns converted values through
subsequent arguments, each of which must be a pointer. It returns when format is exhausted.
fscanf returns EOF if end of file or an error occurs before any conversion; otherwise it returns
the number of input items converted and assigned.
The format string usually contains conversion specifications, which are used to direct
interpretation of input. The format string may contain:
• Blanks or tabs, which are not ignored.
• Ordinary characters (not %), which are expected to match the next non-white space
character of the input stream.
• Conversion specifications, consisting of a % , an optional assignment suppression
character * , an optional number specifying a maximum field width, an optional h , l , or
L indicating the width of the target, and a conversion character.
A conversion specification determines the conversion of the next input field. Normally the
result is placed in the variable pointed to by the corresponding argument. If assignment
suppression is indicated by * , as in %*s , however, the input field is simply skipped; no
assignment is made. An input field is defined as a string of non-white space characters; it
extends either to the next white space character or until the field width, if specified, is
exhausted. This implies that scanf will read across line boundaries to find its input, since204
newlines are white space. (White space characters are blank, tab, newline, carriage return,
vertical tab, and formfeed.)
The conversion character indicates the interpretation of the input field. The corresponding
argument must be a pointer. The legal conversion characters are shown in Table B.2.
The conversion characters d , i , n , o , u , and x may be preceded by h if the argument is a
pointer to short rather than int, or by l (letter ell) if the argument is a pointer to long . The
conversion characters e , f , and g may be preceded by l if a pointer to double rather than
float is in the argument list, and by L if a pointer to a long double .
Table B.2 Scanf Conversions
Character
d
i
o
u
x
c
s
e,f,g
p
n
[...]
[^...]
%
Input Data; Argument type
decimal integer; int*
integer; int* . The integer may be in octal (leading 0 ) or hexadecimal (leading 0x
or 0X ).
octal integer (with or without leading zero); int * .
unsigned decimal integer; unsigned int * .
hexadecimal integer (with or without leading 0x or 0X ); int* .
characters; char* . The next input characters are placed in the indicated array, up
to the number given by the width field; the default is 1. No '\0' is added. The
normal skip over white space characters is suppressed in this case; to read the
next non-white space character, use %1s .
string of non-white space characters (not quoted); char * , pointing to an array
of characters large enough to hold the string and a terminating '\0' that will be
added.
floating-point number; float * . The input format for float 's is an optional sign,
a string of numbers possibly containing a decimal point, and an optional exponent
field containing an E or e followed by a possibly signed integer.
pointer value as printed by printf("%p"); , void * .
writes into the argument the number of characters read so far by this call; int * .
No input is read. The converted item count is not incremented.
matches the longest non-empty string of input characters from the set between
brackets; char * . A '\0' is added. []...] includes ] in the set.
matches the longest non-empty string of input characters not from the set
between brackets; char * . A '\0' is added. [^]...] includes ] in the set.
literal %; no assignment is made.
int scanf(const char *format, ...)
scanf(...) is identical to fscanf(stdin, ...) .
int sscanf(const char *s, const char *format, ...)
sscanf(s, ...) is equivalent to scanf(...) except that the input characters are
taken from the string s .
B.1.4 Character Input and Output Functions
int fgetc(FILE *stream)
fgetc returns the next character of stream as an unsigned char (converted to an
int ), or EOF if end of file or error occurs.
char *fgets(char *s, int n, FILE *stream)
fgets reads at most the next n-1 characters into the array s , stopping if a newline is
encountered; the newline is included in the array, which is terminated by '\0' . fgets
returns s , or NULL if end of file or error occurs.205
int fputc(int c, FILE *stream)
fputc writes the character c (converted to an unsigend char ) on stream . It returns
the character written, or EOF for error.
int fputs(const char *s, FILE *stream)
fputs writes the string s (which need not contain \n ) on stream ; it returns non-
negative, or EOF for an error.
int getc(FILE *stream)
getc is equivalent to fgetc except that if it is a macro, it may evaluate stream more
than once.
int getchar(void)
getchar is equivalent to getc(stdin) .
char *gets(char *s)
gets reads the next input line into the array s ; it replaces the terminating newline with
'\0' . It returns s , or NULL if end of file or error occurs.
int putc(int c, FILE *stream)
putc is equivalent to fputc except that if it is a macro, it may evaluate stream more
than once.
int putchar(int c)
putchar(c) is equivalent to putc(c,stdout) .
int puts(const char *s)
puts writes the string s and a newline to stdout . It returns EOF if an error occurs,
non-negative otherwise.
int ungetc(int c, FILE *stream)
ungetc pushes c (converted to an unsigned char ) back onto stream , where it will be
returned on the next read. Only one character of pushback per stream is guaranteed.
EOF may not be pushed back. ungetc returns the character pushed back, or EOF for
error.
B.1.5 Direct Input and Output Functions
size_t fread(void *ptr, size_t size, size_t nobj, FILE *stream)
fread reads from stream into the array ptr at most nobj objects of size size . fread
returns the number of objects read; this may be less than the number requested. feof
and ferror must be used to determine status.
size_t fwrite(const void *ptr, size_t size, size_t nobj, FILE *stream)
fwrite writes, from the array ptr , nobj objects of size size on stream . It returns the
number of objects written, which is less than nobj on error.
B.1.6 File Positioning Functions
int fseek(FILE *stream, long offset, int origin)
fseek sets the file position for stream ; a subsequent read or write will access data
beginning at the new position. For a binary file, the position is set to offset characters
from origin , which may be SEEK_SET (beginning), SEEK_CUR (current position), or
SEEK_END (end of file). For a text stream, offset must be zero, or a value returned by
ftell (in which case origin must be SEEK_SET ). fseek returns non-zero on error.
long ftell(FILE *stream)
ftell returns the current file position for stream , or -1 on error.
void rewind(FILE *stream)
rewind(fp) is equivalent to fseek(fp, 0L, SEEK_SET); clearerr(fp) .
int fgetpos(FILE *stream, fpos_t *ptr)
fgetpos records the current position in stream in *ptr , for subsequent use by
fsetpos . The type fpos_t is suitable for recording such values. fgetpos returns non-
zero on error.
int fsetpos(FILE *stream, const fpos_t *ptr)206
fsetpos positions stream at the position recorded by fgetpos in *ptr . fsetpos
returns non-zero on error.
B.1.7 Error Functions
Many of the functions in the library set status indicators when error or end of file occur. These
indicators may be set and tested explicitly. In addition, the integer expression errno (declared
in <errno.h> ) may contain an error number that gives further information about the most
recent error.
void clearerr(FILE *stream)
clearerr clears the end of file and error indicators for stream .
int feof(FILE *stream)
feof returns non-zero if the end of file indicator for stream is set.
int ferror(FILE *stream)
ferror returns non-zero if the error indicator for stream is set.
void perror(const char *s)
perror(s) prints s and an implementation-defined error message corresponding to the
integer in errno , as if by
fprintf(stderr, "%s: %s\n", s, " error message ");
See strerror in Section B.3.
