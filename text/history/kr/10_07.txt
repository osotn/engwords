A.7 Expressions
The precedence of expression operators is the same as the order of the major subsections of
this section, highest precedence first. Thus, for example, the expressions referred to as the
operands of + (Par.A.7.7) are those expressions defined in Pars.A.7.1-A.7.6. Within each
subsection, the operators have the same precedence. Left- or right-associativity is specified in
each subsection for the operators discussed therein. The grammar given in Par.13 incorporates
the precedence and associativity of the operators.
The precedence and associativity of operators is fully specified, but the order of evaluation of
expressions is, with certain exceptions, undefined, even if the subexpressions involve side
effects. That is, unless the definition of the operator guarantees that its operands are evaluated
in a particular order, the implementation is free to evaluate operands in any order, or even to
interleave their evaluation. However, each operator combines the values produced by its
operands in a way compatible with the parsing of the expression in which it appears.
This rule revokes the previous freedom to reorder expressions with operators that are mathematically
commutative and associative, but can fail to be computationally associative. The change affects only
floating-point computations near the limits of their accuracy, and situations where overflow is
possible.
The handling of overflow, divide check, and other exceptions in expression evaluation is not
defined by the language. Most existing implementations of C ignore overflow in evaluation of
signed integral expressions and assignments, but this behavior is not guaranteed. Treatment of
division by 0, and all floating-point exceptions, varies among implementations; sometimes it is
adjustable by a non-standard library function.
A.7.1 Pointer Conversion
If the type of an expression or subexpression is ``array of T,'' for some type T, then the value of
the expression is a pointer to the first object in the array, and the type of the expression is
altered to ``pointer to T.'' This conversion does not take place if the expression is in the
operand of the unary & operator, or of ++ , -- , sizeof , or as the left operand of an assignment
operator or the . operator. Similarly, an expression of type ``function returning T,'' except
when used as the operand of the & operator, is converted to ``pointer to function returning T.''
A.7.2 Primary Expressions162
Primary expressions are identifiers, constants, strings, or expressions in parentheses.
primary-expression
identifier
constant
string
(expression)
An identifier is a primary expression, provided it has been suitably declared as discussed below.
Its type is specified by its declaration. An identifier is an lvalue if it refers to an object
(Par.A.5) and if its type is arithmetic, structure, union, or pointer.
A constant is a primary expression. Its type depends on its form as discussed in Par.A.2.5.
A string literal is a primary expression. Its type is originally ``array of char '' (for wide-char
strings, ``array of wchar_t ''), but following the rule given in Par.A.7.1, this is usually modified
to ``pointer to char '' ( wchar_t ) and the result is a pointer to the first character in the string.
The conversion also does not occur in certain initializers; see Par.A.8.7.
A parenthesized expression is a primary expression whose type and value are identical to those
of the unadorned expression. The precedence of parentheses does not affect whether the
expression is an lvalue.
A.7.3 Postfix Expressions
The operators in postfix expressions group left to right.
postfix-expression:
primary-expression
postfix-expression[expression]
postfix-expression(argument-expression-list opt )
postfix-expression.identifier
postfix-expression -> identifier
postfix-expression ++
postfix-expression --
argument-expression-list:
assignment-expression
assignment-expression-list , assignment-expression
A.7.3.1 Array References
A postfix expression followed by an expression in square brackets is a postfix expression
denoting a subscripted array reference. One of the two expressions must have type ``pointer to
T'', where T is some type, and the other must have integral type; the type of the subscript
expression is T. The expression E1[E2] is identical (by definition) to *((E1)+(E2)) . See
Par.A.8.6.2 for further discussion.
A.7.3.2 Function Calls
A function call is a postfix expression, called the function designator, followed by parentheses
containing a possibly empty, comma-separated list of assignment expressions (Par.A7.17),
which constitute the arguments to the function. If the postfix expression consists of an
identifier for which no declaration exists in the current scope, the identifier is implicitly
declared as if the declaration
extern int identifier ();163
had been given in the innermost block containing the function call. The postfix expression
(after possible explicit declaration and pointer generation, Par.A7.1) must be of type ``pointer
to function returning T,'' for some type T, and the value of the function call has type T.
In the first edition, the type was restricted to ``function,'' and an explicit * operator was required to
call through pointers to functions. The ANSI standard blesses the practice of some existing compilers
by permitting the same syntax for calls to functions and to functions specified by pointers. The older
syntax is still usable.
The term argument is used for an expression passed by a function call; the term parameter is
used for an input object (or its identifier) received by a function definition, or described in a
function declaration. The terms ``actual argument (parameter)'' and ``formal argument
(parameter)'' respectively are sometimes used for the same distinction.
In preparing for the call to a function, a copy is made of each argument; all argument-passing
is strictly by value. A function may change the values of its parameter objects, which are copies
of the argument expressions, but these changes cannot affect the values of the arguments.
However, it is possible to pass a pointer on the understanding that the function may change the
value of the object to which the pointer points.
There are two styles in which functions may be declared. In the new style, the types of
parameters are explicit and are part of the type of the function; such a declaration os also
called a function prototype. In the old style, parameter types are not specified. Function
declaration is issued in Pars.A.8.6.3 and A.10.1.
If the function declaration in scope for a call is old-style, then default argument promotion is
applied to each argument as follows: integral promotion (Par.A.6.1) is performed on each
argument of integral type, and each float argument is converted to double . The effect of the
call is undefined if the number of arguments disagrees with the number of parameters in the
definition of the function, or if the type of an argument after promotion disagrees with that of
the corresponding parameter. Type agreement depends on whether the function's definition is
new-style or old-style. If it is old-style, then the comparison is between the promoted type of
the arguments of the call, and the promoted type of the parameter, if the definition is new-
style, the promoted type of the argument must be that of the parameter itself, without
promotion.
If the function declaration in scope for a call is new-style, then the arguments are converted, as
if by assignment, to the types of the corresponding parameters of the function's prototype. The
number of arguments must be the same as the number of explicitly described parameters,
unless the declaration's parameter list ends with the ellipsis notation (, ...) . In that case, the
number of arguments must equal or exceed the number of parameters; trailing arguments
beyond the explicitly typed parameters suffer default argument promotion as described in the
preceding paragraph. If the definition of the function is old-style, then the type of each
parameter in the definition, after the definition parameter's type has undergone argument
promotion.
These rules are especially complicated because they must cater to a mixture of old- and new-style
functions. Mixtures are to be avoided if possible.
The order of evaluation of arguments is unspecified; take note that various compilers differ.
However, the arguments and the function designator are completely evaluated, including all
side effects, before the function is entered. Recursive calls to any function are permitted.
A.7.3.3 Structure References
A postfix expression followed by a dot followed by an identifier is a postfix expression. The
first operand expression must be a structure or a union, and the identifier must name a member
of the structure or union. The value is the named member of the structure or union, and its164
type is the type of the member. The expression is an lvalue if the first expression is an lvalue,
and if the type of the second expression is not an array type.
A postfix expression followed by an arrow (built from - and > ) followed by an identifier is a
postfix expression. The first operand expression must be a pointer to a structure or union, and
the identifier must name a member of the structure or union. The result refers to the named
member of the structure or union to which the pointer expression points, and the type is the
type of the member; the result is an lvalue if the type is not an array type.
Thus the expression E1->MOS is the same as (*E1).MOS . Structures and unions are discussed in
Par.A.8.3.
In the first edition of this book, it was already the rule that a member name in such an expression had
to belong to the structure or union mentioned in the postfix expression; however, a note admitted that
this rule was not firmly enforced. Recent compilers, and ANSI, do enforce it.
A.7.3.4 Postfix Incrementation
A postfix expression followed by a ++ or -- operator is a postfix expression. The value of the
expression is the value of the operand. After the value is noted, the operand is incremented ++
or decremented -- by 1. The operand must be an lvalue; see the discussion of additive
operators (Par.A.7.7) and assignment (Par.A.7.17) for further constraints on the operand and
details of the operation. The result is not an lvalue.
A.7.4 Unary Operators
Expressions with unary operators group right-to-left.
unary-expression:
postfix expression
++ unary expression
-- unary expression
unary-operator cast-expression
sizeof unary-expression
sizeof (type-name)
unary operator: one of
& * + - ~ !
A.7.4.1 Prefix Incrementation Operators
A unary expression followed by a ++ or -- operator is a unary expression. The operand is
incremented ++ or decremented -- by 1. The value of the expression is the value after the
incrementation (decrementation). The operand must be an lvalue; see the discussion of additive
operators (Par.A.7.7) and assignment (Par.A.7.17) for further constraints on the operands and
details of the operation. The result is not an lvalue.
A.7.4.2 Address Operator
The unary operator & takes the address of its operand. The operand must be an lvalue referring
neither to a bit-field nor to an object declared as register , or must be of function type. The
result is a pointer to the object or function referred to by the lvalue. If the type of the operand
is T, the type of the result is ``pointer to T.''
A.7.4.3 Indirection Operator
The unary * operator denotes indirection, and returns the object or function to which its
operand points. It is an lvalue if the operand is a pointer to an object of arithmetic, structure,
union, or pointer type. If the type of the expression is ``pointer to T,'' the type of the result is T.
A.7.4.4 Unary Plus Operator165
The operand of the unary + operator must have arithmetic type, and the result is the value of
the operand. An integral operand undergoes integral promotion. The type of the result is the
type of the promoted operand.
The unary + is new with the ANSI standard. It was added for symmetry with the unary -.
A.7.4.5 Unary Minus Operator
The operand of the unary - operator must have arithmetic type, and the result is the negative
of its operand. An integral operand undergoes integral promotion. The negative of an unsigned
quantity is computed by subtracting the promoted value from the largest value of the promoted
type and adding one; but negative zero is zero. The type of the result is the type of the
promoted operand.
A.7.4.6 One's Complement Operator
The operand of the ~ operator must have integral type, and the result is the one's complement
of its operand. The integral promotions are performed. If the operand is unsigned, the result is
computed by subtracting the value from the largest value of the promoted type. If the operand
is signed, the result is computed by converting the promoted operand to the corresponding
unsigned type, applying ~ , and converting back to the signed type. The type of the result is the
type of the promoted operand.
A.7.4.7 Logical Negation Operator
The operand of the ! operator must have arithmetic type or be a pointer, and the result is 1 if
the value of its operand compares equal to 0, and 0 otherwise. The type of the result is int .
A.7.4.8 Sizeof Operator
The sizeof operator yields the number of bytes required to store an object of the type of its
operand. The operand is either an expression, which is not evaluated, or a parenthesized type
name. When sizeof is applied to a char , the result is 1; when applied to an array, the result is
the total number of bytes in the array. When applied to a structure or union, the result is the
number of bytes in the object, including any padding required to make the object tile an array:
the size of an array of n elements is n times the size of one element. The operator may not be
applied to an operand of function type, or of incomplete type, or to a bit-field. The result is an
unsigned integral constant; the particular type is implementation-defined. The standard header
<stddef.h> (See appendix B) defines this type as size_t .
A.7.5 Casts
A unary expression preceded by the parenthesized name of a type causes conversion of the
value of the expression to the named type.
cast-expression:
unary expression
(type-name) cast-expression
This construction is called a cast. The names are described in Par.A.8.8. The effects of
conversions are described in Par.A.6. An expression with a cast is not an lvalue.
A.7.6 Multiplicative Operators
The multiplicative operators * , / , and % group left-to-right.
multiplicative-expression:
multiplicative-expression * cast-expression
multiplicative-expression / cast-expression
multiplicative-expression % cast-expression166
The operands of * and / must have arithmetic type; the operands of % must have integral type.
The usual arithmetic conversions are performed on the operands, and predict the type of the
result.
The binary * operator denotes multiplication.
The binary / operator yields the quotient, and the % operator the remainder, of the division of
the first operand by the second; if the second operand is 0, the result is undefined. Otherwise, it
is always true that (a/b)*b + a%b is equal to a . If both operands are non-negative, then the
remainder is non-negative and smaller than the divisor, if not, it is guaranteed only that the
absolute value of the remainder is smaller than the absolute value of the divisor.
A.7.7 Additive Operators
The additive operators + and - group left-to-right. If the operands have arithmetic type, the
usual arithmetic conversions are performed. There are some additional type possibilities for
each operator.
additive-expression:
multiplicative-expression
additive-expression + multiplicative-expression
additive-expression - multiplicative-expression
The result of the + operator is the sum of the operands. A pointer to an object in an array and a
value of any integral type may be added. The latter is converted to an address offset by
multiplying it by the size of the object to which the pointer points. The sum is a pointer of the
same type as the original pointer, and points to another object in the same array, appropriately
offset from the original object. Thus if P is a pointer to an object in an array, the expression
P+1 is a pointer to the next object in the array. If the sum pointer points outside the bounds of
the array, except at the first location beyond the high end, the result is undefined.
The provision for pointers just beyond the end of an array is new. It legitimizes a common idiom for
looping over the elements of an array.
The result of the - operator is the difference of the operands. A value of any integral type may
be subtracted from a pointer, and then the same conversions and conditions as for addition
apply.
If two pointers to objects of the same type are subtracted, the result is a signed integral value
representing the displacement between the pointed-to objects; pointers to successive objects
differ by 1. The type of the result is defined as ptrdiff_t in the standard header <stddef.h> .
The value is undefined unless the pointers point to objects within the same array; however, if P
points to the last member of an array, then (P+1)-P has value 1.
A.7.8 Shift Operators
The shift operators << and >> group left-to-right. For both operators, each operand must be
integral, and is subject to integral the promotions. The type of the result is that of the
promoted left operand. The result is undefined if the right operand is negative, or greater than
or equal to the number of bits in the left expression's type.
shift-expression:
additive-expression
shift-expression << additive-expression
shift-expression >> additive-expression
The value of E1<<E2 is E1 (interpreted as a bit pattern) left-shifted E2 bits; in the absence of
overflow, this is equivalent to multiplication by 2 E2 . The value of E1>>E2 is E1 right-shifted E2167
bit positions. The right shift is equivalent to division by 2 E2 if E1 is unsigned or it has a non-
negative value; otherwise the result is implementation-defined.
A.7.9 Relational Operators
The relational operators group left-to-right, but this fact is not useful; a<b<c is parsed as
(a<b)<c , and evaluates to either 0 or 1.
relational-expression:
shift-expression
relational-expression < shift-expression
relational-expression > shift-expression
relational-expression <= shift-expression
relational-expression >= shift-expression
The operators < (less), > (greater), <= (less or equal) and >= (greater or equal) all yield 0 if the
specified relation is false and 1 if it is true. The type of the result is int . The usual arithmetic
conversions are performed on arithmetic operands. Pointers to objects of the same type
(ignoring any qualifiers) may be compared; the result depends on the relative locations in the
address space of the pointed-to objects. Pointer comparison is defined only for parts of the
same object; if two pointers point to the same simple object, they compare equal; if the
pointers are to members of the same structure, pointers to objects declared later in the
structure compare higher; if the pointers refer to members of an array, the comparison is
equivalent to comparison of the the corresponding subscripts. If P points to the last member of
an array, then P+1 compares higher than P , even though P+1 points outside the array.
Otherwise, pointer comparison is undefined.
These rules slightly liberalize the restrictions stated in the first edition, by permitting comparison of
pointers to different members of a structure or union. They also legalize comparison with a pointer just
off the end of an array.
A.7.10 Equality Operators
equality-expression:
relational-expression
equality-expression == relational-expression
equality-expression != relational-expression
The == (equal to) and the != (not equal to) operators are analogous to the relational operators
except for their lower precedence. (Thus a<b == c<d is 1 whenever a<b and c<d have the
same truth-value.)
The equality operators follow the same rules as the relational operators, but permit additional
possibilities: a pointer may be compared to a constant integral expression with value 0, or to a
pointer to void . See Par.A.6.6.
A.7.11 Bitwise AND Operator
AND-expression:
equality-expression
AND-expression & equality-expression
The usual arithmetic conversions are performed; the result is the bitwise AND function of the
operands. The operator applies only to integral operands.
A.7.12 Bitwise Exclusive OR Operator
exclusive-OR-expression:
AND-expression
exclusive-OR-expression ^ AND-expression168
The usual arithmetic conversions are performed; the result is the bitwise exclusive OR function
of the operands. The operator applies only to integral operands.
A.7.13 Bitwise Inclusive OR Operator
inclusive-OR-expression:
exclusive-OR-expression
inclusive-OR-expression | exclusive-OR-expression
The usual arithmetic conversions are performed; the result is the bitwise inclusive OR function
of the operands. The operator applies only to integral operands.
A.7.14 Logical AND Operator
logical-AND-expression:
inclusive-OR-expression
logical-AND-expression && inclusive-OR-expression
The && operator groups left-to-right. It returns 1 if both its operands compare unequal to zero,
0 otherwise. Unlike & , && guarantees left-to-right evaluation: the first operand is evaluated,
including all side effects; if it is equal to 0, the value of the expression is 0. Otherwise, the right
operand is evaluated, and if it is equal to 0, the expression's value is 0, otherwise 1.
The operands need not have the same type, but each must have arithmetic type or be a pointer.
The result is int .
A.7.15 Logical OR Operator
logical-OR-expression:
logical-AND-expression
logical-OR-expression || logical-AND-expression
The || operator groups left-to-right. It returns 1 if either of its operands compare unequal to
zero, and 0 otherwise. Unlike | , || guarantees left-to-right evaluation: the first operand is
evaluated, including all side effects; if it is unequal to 0, the value of the expression is 1.
Otherwise, the right operand is evaluated, and if it is unequal to 0, the expression's value is 1,
otherwise 0.
The operands need not have the same type, but each must have arithmetic type or be a pointer.
The result is int .
A.7.16 Conditional Operator
conditional-expression:
logical-OR-expression
logical-OR-expression ? expression : conditional-expression
The first expression is evaluated, including all side effects; if it compares unequal to 0, the
result is the value of the second expression, otherwise that of the third expression. Only one of
the second and third operands is evaluated. If the second and third operands are arithmetic, the
usual arithmetic conversions are performed to bring them to a common type, and that type is
the type of the result. If both are void , or structures or unions of the same type, or pointers to
objects of the same type, the result has the common type. If one is a pointer and the other the
constant 0, the 0 is converted to the pointer type, and the result has that type. If one is a
pointer to void and the other is another pointer, the other pointer is converted to a pointer to
void , and that is the type of the result.169
In the type comparison for pointers, any type qualifiers (Par.A.8.2) in the type to which the
pointer points are insignificant, but the result type inherits qualifiers from both arms of the
conditional.
A.7.17 Assignment Expressions
There are several assignment operators; all group right-to-left.
assignment-expression:
conditional-expression
unary-expression assignment-operator assignment-expression
assignment-operator: one of
= *= /= %= += -= <<= >>= &= ^= |=
All require an lvalue as left operand, and the lvalue must be modifiable: it must not be an array,
and must not have an incomplete type, or be a function. Also, its type must not be qualified
with const ; if it is a structure or union, it must not have any member or, recursively,
submember qualified with const . The type of an assignment expression is that of its left
operand, and the value is the value stored in the left operand after the assignment has taken
place.
In the simple assignment with = , the value of the expression replaces that of the object referred
to by the lvalue. One of the following must be true: both operands have arithmetic type, in
which case the right operand is converted to the type of the left by the assignment; or both
operands are structures or unions of the same type; or one operand is a pointer and the other is
a pointer to void , or the left operand is a pointer and the right operand is a constant
expression with value 0; or both operands are pointers to functions or objects whose types are
the same except for the possible absence of const or volatile in the right operand.
An expression of the form E1 op= E2 is equivalent to E1 = E1 op (E2) except that E1 is
evaluated only once.
A.7.18 Comma Operator
expression:
assignment-expression
expression , assignment-expression
A pair of expressions separated by a comma is evaluated left-to-right, and the value of the left
expression is discarded. The type and value of the result are the type and value of the right
operand. All side effects from the evaluation of the left-operand are completed before
beginning the evaluation of the right operand. In contexts where comma is given a special
meaning, for example in lists of function arguments (Par.A.7.3.2) and lists of initializers
(Par.A.8.7), the required syntactic unit is an assignment expression, so the comma operator
appears only in a parenthetical grouping, for example,
f(a, (t=3, t+2), c)
has three arguments, the second of which has the value 5.
A.7.19 Constant Expressions
Syntactically, a constant expression is an expression restricted to a subset of operators:
constant-expression:
conditional-expression170
Expressions that evaluate to a constant are required in several contexts: after case , as array
bounds and bit-field lengths, as the value of an enumeration constant, in initializers, and in
certain preprocessor expressions.
Constant expressions may not contain assignments, increment or decrement operators, function
calls, or comma operators; except in an operand of sizeof . If the constant expression is
required to be integral, its operands must consist of integer, enumeration, character, and
floating constants; casts must specify an integral type, and any floating constants must be cast
to integer. This necessarily rules out arrays, indirection, address-of, and structure member
operations. (However, any operand is permitted for sizeof .)
More latitude is permitted for the constant expressions of initializers; the operands may be any
type of constant, and the unary & operator may be applied to external or static objects, and to
external and static arrays subscripted with a constant expression. The unary & operator can
also be applied implicitly by appearance of unsubscripted arrays and functions. Initializers must
evaluate either to a constant or to the address of a previously declared external or static object
plus or minus a constant.
Less latitude is allowed for the integral constant expressions after #if ; sizeof expressions,
enumeration constants, and casts are not permitted. See Par.A.12.5.
