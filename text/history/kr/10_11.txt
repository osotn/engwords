A.11 Scope and Linkage
A program need not all be compiled at one time: the source text may be kept in several files
containing translation units, and precompiled routines may be loaded from libraries.
Communication among the functions of a program may be carried out both through calls and
through manipulation of external data.
Therefore, there are two kinds of scope to consider: first, the lexical scope of an identifier
which is the region of the program text within which the identifier's characteristics are
understood; and second, the scope associated with objects and functions with external linkage,
which determines the connections between identifiers in separately compiled translation units.
A.11.1 Lexical Scope
Identifiers fall into several name spaces that do not interfere with one another; the same
identifier may be used for different purposes, even in the same scope, if the uses are in different
name spaces. These classes are: objects, functions, typedef names, and enum constants; labels;
tags of structures or unions, and enumerations; and members of each structure or union
individually.
These rules differ in several ways from those described in the first edition of this manual. Labels did
not previously have their own name space; tags of structures and unions each had a separate space,
and in some implementations enumerations tags did as well; putting different kinds of tags into the
same space is a new restriction. The most important departure from the first edition is that each
structure or union creates a separate name space for its members, so that the same name may appear in
several different structures. This rule has been common practice for several years.
The lexical scope of an object or function identifier in an external declaration begins at the end
of its declarator and persists to the end of the translation unit in which it appears. The scope of
a parameter of a function definition begins at the start of the block defining the function, and
persists through the function; the scope of a parameter in a function declaration ends at the end
of the declarator. The scope of an identifier declared at the head of a block begins at the end of
its declarator, and persists to the end of the block. The scope of a label is the whole of the
function in which it appears. The scope of a structure, union, or enumeration tag, or an
enumeration constant, begins at its appearance in a type specifier, and persists to the end of a
translation unit (for declarations at the external level) or to the end of the block (for
declarations within a function).
If an identifier is explicitly declared at the head of a block, including the block constituting a
function, any declaration of the identifier outside the block is suspended until the end of the
block.
A.11.2 Linkage
Within a translation unit, all declarations of the same object or function identifier with internal
linkage refer to the same thing, and the object or function is unique to that translation unit. All188
declarations for the same object or function identifier with external linkage refer to the same
thing, and the object or function is shared by the entire program.
As discussed in Par.A.10.2, the first external declaration for an identifier gives the identifier
internal linkage if the static specifier is used, external linkage otherwise. If a declaration for
an identifier within a block does not include the extern specifier, then the identifier has no
linkage and is unique to the function. If it does include extern , and an external declaration for
is active in the scope surrounding the block, then the identifier has the same linkage as the
external declaration, and refers to the same object or function; but if no external declaration is
visible, its linkage is external.
