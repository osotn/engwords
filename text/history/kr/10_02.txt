.2 Lexical Conventions
A program consists of one or more translation units stored in files. It is translated in several
phases, which are described in Par.A.12. The first phases do low-level lexical transformations,
carry out directives introduced by the lines beginning with the # character, and perform macro
definition and expansion. When the preprocessing of Par.A.12 is complete, the program has
been reduced to a sequence of tokens.
A.2.1 Tokens
There are six classes of tokens: identifiers, keywords, constants, string literals, operators, and
other separators. Blanks, horizontal and vertical tabs, newlines, formfeeds and comments as
described below (collectively, ``white space'') are ignored except as they separate tokens.
Some white space is required to separate otherwise adjacent identifiers, keywords, and
constants.
If the input stream has been separated into tokens up to a given character, the next token is the
longest string of characters that could constitute a token.
A.2.2 Comments
The characters /* introduce a comment, which terminates with the characters */ . Comments
do not nest, and they do not occur within a string or character literals.
A.2.3 Identifiers
An identifier is a sequence of letters and digits. The first character must be a letter; the
underscore _ counts as a letter. Upper and lower case letters are different. Identifiers may have
any length, and for internal identifiers, at least the first 31 characters are significant; some
implementations may take more characters significant. Internal identifiers include preprocessor
macro names and all other names that do not have external linkage (Par.A.11.2). Identifiers
with external linkage are more restricted: implementations may make as few as the first six
characters significant, and may ignore case distinctions.
A.2.4 Keywords
The following identifiers are reserved for the use as keywords, and may not be used otherwise:
auto
break
double
else
int
long
struct
switch155
case
char
const
continue
default
do
enum
extern
float
for
goto
if
register
typedef
return
union
short
unsigned
signed
void
sizeof
volatile
static
while
Some implementations also reserve the words fortran and asm .
The keywords const, signed, and volatile are new with the ANSI standard; enum and void
are new since the first edition, but in common use; entry, formerly reserved but never used, is no
longer reserved.
A.2.5 Constants
There are several kinds of constants. Each has a data type; Par.A.4.2 discusses the basic types:
constant:
integer-constant
character-constant
floating-constant
enumeration-constant
A.2.5.1 Integer Constants
An integer constant consisting of a sequence of digits is taken to be octal if it begins with 0
(digit zero), decimal otherwise. Octal constants do not contain the digits 8 or 9 . A sequence of
digits preceded by 0x or 0X (digit zero) is taken to be a hexadecimal integer. The hexadecimal
digits include a or A through f or F with values 10 through 15 .
An integer constant may be suffixed by the letter u or U , to specify that it is unsigned. It may
also be suffixed by the letter l or L to specify that it is long.
The type of an integer constant depends on its form, value and suffix. (See Par.A.4 for a
discussion of types). If it is unsuffixed and decimal, it has the first of these types in which its
value can be represented: int , long int , unsigned long int . If it is unsuffixed, octal or
hexadecimal, it has the first possible of these types: int , unsigned int , long int , unsigned
long int . If it is suffixed by u or U , then unsigned int , unsigned long int . If it is
suffixed by l or L , then long int , unsigned long int . If an integer constant is suffixed by
UL , it is unsigned long .
The elaboration of the types of integer constants goes considerably beyond the first edition, which
merely caused large integer constants to be long. The U suffixes are new.
A.2.5.2 Character Constants
A character constant is a sequence of one or more characters enclosed in single quotes as in
'x' . The value of a character constant with only one character is the numeric value of the
character in the machine's character set at execution time. The value of a multi-character
constant is implementation-defined.
Character constants do not contain the ' character or newlines; in order to represent them, and
certain other characters, the following escape sequences may be used:
newline
horizontal tab
vertical tab
backspace
carriage return
formfeed
audible alert
NL (LF)
HT
VT
BS
CR
FF
BEL
\n
\t
\v
\b
\r
\f
\a
backslash
question mark
single quote
double quote
octal number
hex number
\ \\
? \?
' \'
\"
"
ooo \ooo
hh
\xhh156
The escape \ooo consists of the backslash followed by 1, 2, or 3 octal digits, which are taken
to specify the value of the desired character. A common example of this construction is \0 (not
followed by a digit), which specifies the character NUL. The escape \xhh consists of the
backslash, followed by x , followed by hexadecimal digits, which are taken to specify the value
of the desired character. There is no limit on the number of digits, but the behavior is undefined
if the resulting character value exceeds that of the largest character. For either octal or
hexadecimal escape characters, if the implementation treats the char type as signed, the value
is sign-extended as if cast to char type. If the character following the \ is not one of those
specified, the behavior is undefined.
In some implementations, there is an extended set of characters that cannot be represented in
the char type. A constant in this extended set is written with a preceding L , for example L'x' ,
and is called a wide character constant. Such a constant has type wchar_t , an integral type
defined in the standard header <stddef.h> . As with ordinary character constants, hexadecimal
escapes may be used; the effect is undefined if the specified value exceeds that representable
with wchar_t .
Some of these escape sequences are new, in particular the hexadecimal character representation.
Extended characters are also new. The character sets commonly used in the Americas and western
Europe can be encoded to fit in the char type; the main intent in adding wchar_t was to
accommodate Asian languages.
A.2.5.3 Floating Constants
A floating constant consists of an integer part, a decimal part, a fraction part, an e or E , an
optionally signed integer exponent and an optional type suffix, one of f , F , l , or L . The integer
and fraction parts both consist of a sequence of digits. Either the integer part, or the fraction
part (not both) may be missing; either the decimal point or the e and the exponent (not both)
may be missing. The type is determined by the suffix; F or f makes it float , L or l makes it
long double , otherwise it is double .
A2.5.4 Enumeration Constants
Identifiers declared as enumerators (see Par.A.8.4) are constants of type int .
A.2.6 String Literals
A string literal, also called a string constant, is a sequence of characters surrounded by double
quotes as in "..." . A string has type ``array of characters'' and storage class static (see
Par.A.3 below) and is initialized with the given characters. Whether identical string literals are
distinct is implementation-defined, and the behavior of a program that attempts to alter a string
literal is undefined.
Adjacent string literals are concatenated into a single string. After any concatenation, a null
byte \0 is appended to the string so that programs that scan the string can find its end. String
literals do not contain newline or double-quote characters; in order to represent them, the same
escape sequences as for character constants are available.
As with character constants, string literals in an extended character set are written with a
preceding L , as in L"..." . Wide-character string literals have type ``array of wchar_t .''
Concatenation of ordinary and wide string literals is undefined.
The specification that string literals need not be distinct, and the prohibition against modifying them,
are new in the ANSI standard, as is the concatenation of adjacent string literals. Wide-character string
literals are new.
