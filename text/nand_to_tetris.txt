I. Hardware

- how computer systems work
- how break complex problems into manageable modules
- how to build large-scale hardware and software

Program is nothing more than a encounter sequence of plain characters,
stored deceptively in a text file.

 -> compilation -> machine language -> hardware architecture -> registers, memory, adders -> gates

high-level language -> os
 -> compile -> vm code
 -> machine language -> cpu -> ALU, RAM -> gates

Boolean operators: And, Or, Not, Xor
Boolean values: True, False (1, 0)

Gate is a physical device that implementes a simple Boolean function.


XOR

	a | b | out
        -----------
        0 | 0 | 0
        0 | 1 | 1
        1 | 0 | 1
        1 | 1 | 0

out = !a & b | a & !b

Half-adder

       a | b | c | s
       -------------
       0 | 0 | 0 | 0
       0 | 1 | 0 | 1
       1 | 0 | 0 | 1
       1 | 1 | 1 | 0

c = a & b;  s = xor(a,b)

Full add

s1, c1  = hadd(a,b)
s2, c2 =  hadd(c, s1)
c = c1 | c2

Multiplexer

        a | b | sel | out
        -----------------
        0 | 0 |  0  | a=0
        0 | 1 |  0  | a=0
        1 | 0 |  0  | a=1
        1 | 1 |  0  | a=1
        0 | 0 |  1  | b=0
        0 | 1 |  1  | b=1
        1 | 0 |  1  | b=0
        1 | 1 |  1  | b=1

 out = a&!b&!sel | a&b&!sel | !a&b&sel | a&b&sel = a&!sel  | b&sel

Demultiplexer:

	sel | a  b
         0  | in in
         1  | 0  in

         in | sel | a | b
          0 |  0  | 0 | 0
          1 |  0  | 1 | 0
          0 |  1  | 0 | 0
          1 |  1  | 0 | 1

 a = in & !sel
 b = in & sel

ALU
---

zx x=0
nx x = !x
zy y=0
ny y=!y
f x+y x&y
no out=!out

	zx | nx | zy | ny | f | no | out
         1 |  0 |  1 |  0 | 1 |  0 |  0           out = 0 + 0
         1 |  1 |  1 |  1 | 1 |  1 |  1           out = !(-1 + -1) = !(-2) = 1
         1 |  1 |  1 |  0 | 1 |  0 |  -1          out = -1 + 0 = -1
         0 |  0 |  1 |  1 | 0 |  0 |  x           out = x & -1 = x
         1 |  1 |  0 |  0 | 0 |  0 |  y           out =  -1 & y = y
         0 |  0 |  1 |  1 | 0 |  1 |  !x           
         1 |  1 |  0 |  0 | 0 |  1 |  !y
         0 |  0 |  1 |  1 | 1 |  1 |  -x
         1 |  1 |  0 |  0 | 1 |  1 |  -y
         0 |  1 |  1 |  1 | 1 |  1 |  x+1
         1 |  1 |  0 |  1 | 1 |  1 |  y+1
         0 |  0 |  1 |  1 | 1 |  0 |  x-1
         1 |  1 |  0 |  0 | 1 |  1 |  y-1
         0 |  0 |  0 |  0 | 1 |  0 |  x+y
         0 |  1 |  0 |  0 | 1 |  1 |  x-y
         0 |  0 |  0 |  1 | 1 |  1 |  y-x
         0 |  0 |  0 |  1 | 1 |  1 |  x&y
         0 |  1 |  0 |  1 | 0 |  1 |  x|y
	
Memory
-----
Such chips as ALU are called combinational: they respond to different combinations of their inputs
without delay, except fot the time it takes their inner chip parts to complete the computation.

Sequential chips.
Unlike combinational chips, which are oblivious to time, the outputs of sequential chips depend not
only on the inputs in the current time but also on inputs and outputs that have been processed previously.

Before we start talking about memory, we must first figure out how to use logic to model the
progression of time. This can be done usinga clock that generates an ongoing train of binary signals
that we call tick and tock. The time between the beginning of a tick and the end of the subsequent tock
is called a cycle.


Computer programs use variables, arrays, and objects - abstractions that persist data over time.


4. Machine language
-------------------
If you wish to understand a system, or build one, start by studing the function that the system
is supposed to serve.

Machine language is the most profound interface in the computer enterprise - the fine line
where hardware meets software.

CPU, or processor, is a device capable of performing a fixed set of primitive operations.

Machine language programs can be written in two alternative, but equivalent, ways: binary and symbolic.
Why not use symbolic instructions for writing programs, and then use another program - a translator - for
translating the symbolic instructions into executable binary code.
Symbolic machine languages are called assembly languages, and the programs that translate them into
binary code are called assemblers.

Arithmetic and logical operations:
	load R1, 17  // R1 <- 17
	load R2, 4   // R2 <- 4
	add  R1, R1, R2 // R1 <- R1 + R4

	and  R1, R1, R2 // bit-wize And	

Flow control:
While computer programs execute by default sequentially, one instruction after another,
they also include occasional jumps to locations other than the next intruction.
	goto instructions

Symbols: The code version that uses symbolic references is much easier to write, debug.

The data memory (RAM) is a read/write device.

Using symbolic address (LOOP) <- label 

Data memory (RAM) is wr.
Instruction memory (ROM) is ro.

D - data register 16 bit.
A - address register, 16 bit.
M - memory register.

@17 - store 17 to A
@17, D=A - store 17 to A, D <= A

@17 - 1) A <= 17, M=Ram[17], PC= 


6
Assembler

One complication arises from allowing assembly programs to use symbolic references to memory addresses.
The assembler is expected to manage these symbols and resolve them to physical addresses.
This task is normally done using a symbol table - a commonly used data structure.

3 type of symbols:
1. labels - locations in the code
2. variables 
3. predefined symbols

Assembly program is a sequence of:
	assembly instruction;  A or C instructions
	label declaration;  (xxx)
	comment  //

instruction:
	A:	@xxx, xxx is a decimal 0..32767, or symbol
	C:	[dest=]comp[;jump] => dest=comp dest=comp;jump comp comp;jump

Predefined symbols: R0..R15 = 0..15; SP, LCL, ARG, THIS, THAT = 0..4, SCREEN 16384, KBD 24576

Label symbols: (xxx)
Varibale symbols xxx, from 16

Symbols: letters, digits, _ . $ :  but not begin with a digit
Leading space characters and empty lines are ignored
All the assembly mnemonics must be written in uppercase.
The remaining symbols - labes and variables - are case sentitive.
The recommended convention - labels - uppercase and variables lowercase.

Is to develop a two pass assembler that reads the code twice.
In the first pass 0 builds a symbol table, adds all the label symbols to the tables, and generates no code.

Parse module for parsing the input into instruction and instructions into filds,
a Code module for translatin the fields (symbolic mnemonics) into binary codes.

hasMoreLines - boolean
advance - skips over white space and comments
instructionType - A_instruction C_INSTRUCTION L_INSTRACTION 
symbol - string if A_instruction or L_instruction
dest -  dest if C_instruction   3bits
comp                            7bits
jump                            3bits

init - create a new empty symbol table
addEntry - add <symbol, address>
contains - boolean does the symbol in table
getAddress int - return address of the symbol


Software
========
Compiler will gereate interim VM code, designed to run on an abstract virtual machine.
The VM code will then be compiled further by a separate translator into the Hack machine language.


Jack hello world
----------------
class Main {
	function void main() {
		do Output.printString("Hello World");
		return;
	}
}


Jack class is a collection of one or more:
	- subroutines;
		- constructor
		- method
		- function

	Contructor creates new objects
	Methods operates on the current object
	Functions operates on no particular object.

Only three primitive data types: int, boolean, char.

A high-level is a symbolic abstraction that means nothing to the underlying hardware.
Before executing a program, the high-level code must be translated into machine language.
This translation process is called compilation, and the program that carries it out is
called a compiler.

Java and C# deal with challenge by employing an elegant two tier compilation model.
First, the source program is translated into an interim, abstract VM code (bytecode).
Next, using a completely separate and independent process, the VM code can be
translated further into the machine language of any target hardware platform.

*.jack -> *.vm -> *.asm -> *.hack

7.
Virtual machine I: Processing
-----------------------------

VM is similar to the JVM (Java Virtual Machine) and bytecode.
The VM language consists of arithmetic logical commands, memory access commands called
push and pop, branching commands, and function call and return commands.

Stack is a fundamental and elegant data structure that comes to play in
numerous computer systems, algorithms, and applications.

A stack is a sequential storage space that grows and shrinks as needed.
The push operation adds a value to the top of the stack.
The pop operation removes the stack top value.

d = (2-x) + (y+9)
push 2
push x
sub
push y
push 9
add
add
pop d

2  -5  -5  -5  16 =>
7      12  21 
        9 

argument 	- function argument
local		- function local variable
static 		- static variable
constatn	- constant
this		- 
that		-
pointer		-
temp

Arithmetic logical commands:
	- add, sub, neg			x+y	x-y 	-y
	- eq, gt, lt			x == y	x > y	x < y
	- and, or, not

push x	=> RAM[SP] = x; SP++
pop x   => SP--; x = RAM[SP]

Stack in 256 RAM address

RAM:
0-15	=> R0..R15
16-255  => static variables
256-2047 => stack

SP = RAM[0] - SP
LCL  = 1 - Base address of local segment
ARG  = 2 - base address of the argument segment
THIS = 3 - base addres of the this segment
THAT = 4 - base address of the that segment
TEMP - 5..12 holds the temp segment

Pointer - segment contains exactly two values

VM translate:
	- main
	- parser
	- code writer

command Type: C_ARITHMETIC, C_PUSH, C_POP, C_LABEL, C_GOTO, C_IF, C_RETURN, C_CALL


Functions is the bread and butter of modular programming.
Calling function (the caller) passes agrements to the called fucntion (the callee).

label label: the current location in the fucntion code.
The scope of the label is the function in which it is defined.
goto label: effects an unconditional goto operation
if-goto label - a conditional goto operation	




call <function_nam> <n_args>

	@SP
	D=M
	@(n_args + 5)
	D = D-A
	@(argument)
	M = D

	@SP
	D = M
	@(local)
	M = D

	@(address)
	0;JMP
	(return_label)	


Function <functioin_name> <n_vars>  - function has n_vars local variables.

call <function_name> <n_args> - n arguments before call

return 


Many files
One file is amy Jack program must be name main.jack
and one function in this file must be named main.
 => Main.vm  Main.main -> application entry point.

The first function is Sys.init -> part of OS

Caller:
	- push onto the stack n_args
	- invoke callee fileName.functionName nArgs
	- disappeared stack args
	- get return value from stack
	- can be changed only static and temp

Calle:
	- argument segment has been initialized with the argument values passed by the caller
	- local variables allocated and initialized to zeroes
	- static segment t0 static of VM file
        - before return, need to push return value.

 
call f nArgs:
		push returnAddress	- (generate a label and pushes it to the stack)
		push LCL		-
		push ARG
		push THIS
		push THAT
		ARG = SP - 5 - nArgs
		LCL = SP
		goto f
		(return address)

function f nVars:
		(f)
		repeat n
			push 0

return:
		local frame = LCL
		    @LCL
		    D=M
		    @R14
		    M=D
		local retAddr = *(frame-5)
		    @5
		    D=A
		    @R14
		    A=M-D
		    @R15
		    M=D
		*ARG = pop()
		    ***
		SP = ARG+1
		    @ARG
		    D=M+1
		    @SP
		    M=D
		THAT = *(--frame)
		    @R14
		    AM=M-1
		    D=M
		    @THAT
		    M=D
		THIS = *(--frame)
		    @R14
		    AM=M-1
		    D=M
		    @THIS
		    M=D
		ARG = *(--frame)
		    @R14
		    AM=M-1
		    D=M
		    @ARG
		    M=D
		LCL = *(--frame)
		    @R14
		    AM=M-1
		    D=M
		    @LCL
		    M=D
		goto retAddr
		    @R15
		    A=M
		    0;JMP
	        


function Main.main			(Main.main)
					...
	call Point.new			goto Point.new
					(Main.main$ret0)
	...
function Point.new			(Point.new)
	...
	return				goto Main.main$ret0

SP	= 256
LCL	= address of the virtual segment local
ARG					 argument
THIS					 this
THAT					 that

xxx.i  xxx - file: static i

functionName$label	label in functionName

functionName

functionName$ret.i

R13-R15

Bootstrap code:
	SP = 256
	call Sys.init

TEMP RAM[5-12]  temp segment
R13-R15 - for VM transmlator


push segment index
			[SP] = segment[index], segment: argument, local, static, constant, this, that, pointer, temp
 			sp++
pop segment index	sp--; segment[index] = [SP]

add, sub, neg
eq, gt, lt
and, or, not


push static x
    // *(*SP) = *(static.x)
    /// D = *(static.x)
    @static.x
    D = M
    /// *(*SP) = D
    @SP
    A = M
    M = D
    // SP++
    @SP
    M = M+1

push constant a
    // D = a
    @a
    D = A
    // *(*SP) = D
    // SP++

push {local|argument|this|that|temp} n
    // *(*SP) = *(*(reg) + n)
    /// D = *(*(reg) + n)
    @n                  //
    D = A               // if n > 1
    @reg
    // @LCL <= local
    // @ARG <= argument
    // @THIS <= this
    // @THAT <= that
    // @(R5 +  0..7)
    A = D+M // if n == 0 then A = M; if n == 1 then A = M+1
    D = M
    /// *SP = D, SP++
    ***
    

pop static x
    // *(static.x) = *(*(SP - 1)); SP--
    /// D = *(SP-1); SP = SP-1
    @SP
    AM = M-1
    D = M
    /// *(static.x) = D
    @static.x
    M = D

pop {local|argument|this|that|temp} n
    // *(*(reg) + n) = *(*(SP - 1)); SP--
    ////  R13 = *(reg) + n
    @n          //
    D = A       // if n > 0
    @reg
      // @LCL <= local
      // @ARG <= argument
      // @THIS <= this
      // @THAT <= that
      // @R5   <= 0..7
    D = D+M    // D = M, D = M+1
    @R13
    M = D
    ////  D = *(SP-1); SP = SP-1
    ***
    ////  *(R13) = D
    @R13
    A = M
    M = D

    D=D+M    
    D = A      //   if n == 1  D = A+1
    @n         // if n > 0
    D = D + A  //
    @R13
    A = M
    

{add|sub|and|or} 
    // *(*SP-2) = *(*SP-1) + *(*SP-2); SP--
    /// D = *(SP-1); SP = SP-1
    ***
    A = A-1
    M=D+M   // D-M D&M D|M


{neg|not} 
    @SP
    A = M-1
    M=-M // M=!M

 eq, gt, lt
    // 
    /// D = *(SP-1); SP = SP-1
    ***
    A = A-1
    D = M-D
    @cmd_TRUE_x
    D;Jxx
    @SP
    A = M-1
    M = 0
    @cmd_END_x
    0;JMP
    (cmd_TRUE_x)
    @SP
    A = M-1
    M=-1
    (cmd_END_x)

(label)
    (filename$label)

goto
    @funcname$label
    0;JMP

if-goto
    @SP
    AM = M-1
    D = M
    @funcname$label
    D;JNE



    
    

